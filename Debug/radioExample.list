
radioExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006090  08006090  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006098  08006098  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000007c  0800611c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800611c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017843  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334a  00000000  00000000  000378e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb0d  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014255  00000000  00000000  00058edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a34ce  00000000  00000000  0006d132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056cc  00000000  00000000  00110654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005dd8 	.word	0x08005dd8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08005dd8 	.word	0x08005dd8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96c 	b.w	8000520 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8082 	bne.w	8000376 <__udivmoddi4+0x116>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d946      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa05 f302 	lsl.w	r3, r5, r2
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	4097      	lsls	r7, r2
 800028c:	ea41 0e03 	orr.w	lr, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fbbe fcf8 	udiv	ip, lr, r8
 800029c:	b2b9      	uxth	r1, r7
 800029e:	fb08 ee1c 	mls	lr, r8, ip, lr
 80002a2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002a6:	fb0c f001 	mul.w	r0, ip, r1
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002b4:	f080 8116 	bcs.w	80004e4 <__udivmoddi4+0x284>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f240 8113 	bls.w	80004e4 <__udivmoddi4+0x284>
 80002be:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c2:	443b      	add	r3, r7
 80002c4:	1a1b      	subs	r3, r3, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f101 	mul.w	r1, r0, r1
 80002d8:	42a1      	cmp	r1, r4
 80002da:	d909      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002dc:	193c      	adds	r4, r7, r4
 80002de:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e2:	f080 8101 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002e6:	42a1      	cmp	r1, r4
 80002e8:	f240 80fe 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002ec:	3802      	subs	r0, #2
 80002ee:	443c      	add	r4, r7
 80002f0:	1a64      	subs	r4, r4, r1
 80002f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d14f      	bne.n	80003b2 <__udivmoddi4+0x152>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80e7 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 8000342:	4684      	mov	ip, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d7 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7c0      	b.n	80002f8 <__udivmoddi4+0x98>
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80af 	beq.w	80004de <__udivmoddi4+0x27e>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d14b      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0x13e>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80b7 	bhi.w	800050c <__udivmoddi4+0x2ac>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0303 	sbc.w	r3, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	469e      	mov	lr, r3
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0aa      	beq.n	8000302 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b0:	e7a7      	b.n	8000302 <__udivmoddi4+0xa2>
 80003b2:	f1c2 0c20 	rsb	ip, r2, #32
 80003b6:	fa01 f302 	lsl.w	r3, r1, r2
 80003ba:	4097      	lsls	r7, r2
 80003bc:	fa20 f00c 	lsr.w	r0, r0, ip
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003c8:	4318      	orrs	r0, r3
 80003ca:	fbbc f1fe 	udiv	r1, ip, lr
 80003ce:	0c05      	lsrs	r5, r0, #16
 80003d0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003dc:	fb01 f308 	mul.w	r3, r1, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	197d      	adds	r5, r7, r5
 80003ea:	f101 3cff 	add.w	ip, r1, #4294967295
 80003ee:	f080 808b 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8088 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	b285      	uxth	r5, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d271      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 800041c:	42ab      	cmp	r3, r5
 800041e:	d96f      	bls.n	8000500 <__udivmoddi4+0x2a0>
 8000420:	3802      	subs	r0, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c1 0c20 	rsb	ip, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f70c 	lsr.w	r7, r2, ip
 8000436:	431f      	orrs	r7, r3
 8000438:	fa20 f40c 	lsr.w	r4, r0, ip
 800043c:	fa05 f301 	lsl.w	r3, r5, r1
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa25 f50c 	lsr.w	r5, r5, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 5519 	mls	r5, lr, r9, r5
 8000458:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800045c:	fb09 fa08 	mul.w	sl, r9, r8
 8000460:	45aa      	cmp	sl, r5
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f301 	lsl.w	r3, r0, r1
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x21e>
 800046c:	197d      	adds	r5, r7, r5
 800046e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000472:	d247      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 8000474:	45aa      	cmp	sl, r5
 8000476:	d945      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000478:	f1a9 0902 	sub.w	r9, r9, #2
 800047c:	443d      	add	r5, r7
 800047e:	eba5 050a 	sub.w	r5, r5, sl
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb5 f0fe 	udiv	r0, r5, lr
 8000488:	fb0e 5510 	mls	r5, lr, r0, r5
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb00 f808 	mul.w	r8, r0, r8
 8000494:	45a0      	cmp	r8, r4
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f100 35ff 	add.w	r5, r0, #4294967295
 800049e:	d22d      	bcs.n	80004fc <__udivmoddi4+0x29c>
 80004a0:	45a0      	cmp	r8, r4
 80004a2:	d92b      	bls.n	80004fc <__udivmoddi4+0x29c>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	fba0 8902 	umull	r8, r9, r0, r2
 80004b4:	454c      	cmp	r4, r9
 80004b6:	46c6      	mov	lr, r8
 80004b8:	464d      	mov	r5, r9
 80004ba:	d319      	bcc.n	80004f0 <__udivmoddi4+0x290>
 80004bc:	d016      	beq.n	80004ec <__udivmoddi4+0x28c>
 80004be:	b15e      	cbz	r6, 80004d8 <__udivmoddi4+0x278>
 80004c0:	ebb3 020e 	subs.w	r2, r3, lr
 80004c4:	eb64 0405 	sbc.w	r4, r4, r5
 80004c8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	ea4c 0202 	orr.w	r2, ip, r2
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c6 2400 	strd	r2, r4, [r6]
 80004d8:	2100      	movs	r1, #0
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	4631      	mov	r1, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e70e      	b.n	8000302 <__udivmoddi4+0xa2>
 80004e4:	46ac      	mov	ip, r5
 80004e6:	e6ed      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e701      	b.n	80002f0 <__udivmoddi4+0x90>
 80004ec:	4543      	cmp	r3, r8
 80004ee:	d2e6      	bcs.n	80004be <__udivmoddi4+0x25e>
 80004f0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f4:	eb69 0507 	sbc.w	r5, r9, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	e7e0      	b.n	80004be <__udivmoddi4+0x25e>
 80004fc:	4628      	mov	r0, r5
 80004fe:	e7d3      	b.n	80004a8 <__udivmoddi4+0x248>
 8000500:	4660      	mov	r0, ip
 8000502:	e78f      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000504:	4681      	mov	r9, r0
 8000506:	e7ba      	b.n	800047e <__udivmoddi4+0x21e>
 8000508:	4661      	mov	r1, ip
 800050a:	e777      	b.n	80003fc <__udivmoddi4+0x19c>
 800050c:	4608      	mov	r0, r1
 800050e:	e74b      	b.n	80003a8 <__udivmoddi4+0x148>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443d      	add	r5, r7
 8000516:	e715      	b.n	8000344 <__udivmoddi4+0xe4>
 8000518:	3802      	subs	r0, #2
 800051a:	443c      	add	r4, r7
 800051c:	e726      	b.n	800036c <__udivmoddi4+0x10c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	2001      	movs	r0, #1
 800056a:	f7ff ffdb 	bl	8000524 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2002      	movs	r0, #2
 8000570:	f7ff ffd8 	bl	8000524 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	4809      	ldr	r0, [pc, #36]	; (80005a0 <MX_GPIO_Init+0x4c>)
 800057a:	f002 f9ad 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800057e:	2310      	movs	r3, #16
 8000580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MX_GPIO_Init+0x4c>)
 8000594:	f002 f840 	bl	8002618 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48000400 	.word	0x48000400

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b0e0      	sub	sp, #384	; 0x180
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 fe8f 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8a5 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ffcf 	bl	8000554 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005b6:	f000 fc9f 	bl	8000ef8 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 fd2f 	bl	800101c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	strcpy(uartBuff, "\n\rPING PONG\r\nAPP_VERSION=0.0.1\r\n---------------\r\n");
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4a49      	ldr	r2, [pc, #292]	; (80006e8 <main+0x144>)
 80005c2:	461c      	mov	r4, r3
 80005c4:	4615      	mov	r5, r2
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdd1 	bl	8000180 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	1d39      	adds	r1, r7, #4
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	4840      	ldr	r0, [pc, #256]	; (80006ec <main+0x148>)
 80005ea:	f004 f9ce 	bl	800498a <HAL_UART_Transmit>
	sprintf(uartBuff, "LORA_MODULATION\r\nLORA_BW=%d Hz\r\nLORA_SF=%d\r\n", (1 << LORA_BANDWIDTH) * 125, LORA_SPREADING_FACTOR);
 80005ee:	1d38      	adds	r0, r7, #4
 80005f0:	2307      	movs	r3, #7
 80005f2:	227d      	movs	r2, #125	; 0x7d
 80005f4:	493e      	ldr	r1, [pc, #248]	; (80006f0 <main+0x14c>)
 80005f6:	f004 ffb1 	bl	800555c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdbf 	bl	8000180 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	4837      	ldr	r0, [pc, #220]	; (80006ec <main+0x148>)
 800060e:	f004 f9bc 	bl	800498a <HAL_UART_Transmit>
	radioInit();
 8000612:	f000 f8c5 	bl	80007a0 <radioInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// get random number
	  uint32_t rnd = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 800061c:	2300      	movs	r3, #0
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f001 f926 	bl	8001874 <SUBGRF_SetDioIrqParams>
	  rnd = SUBGRF_GetRandom();
 8000628:	f000 ffad 	bl	8001586 <SUBGRF_GetRandom>
 800062c:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c

	  fsm.state = STATE_NULL;
 8000630:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	  fsm.subState = SSTATE_NULL;
 8000638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063c:	2200      	movs	r2, #0
 800063e:	705a      	strb	r2, [r3, #1]
	  fsm.rxTimeout = 3000; // 3000 ms
 8000640:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000648:	605a      	str	r2, [r3, #4]
	  fsm.rxMargin = 200;   // 200 ms
 800064a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800064e:	22c8      	movs	r2, #200	; 0xc8
 8000650:	609a      	str	r2, [r3, #8]
	  fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 8000652:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000656:	0d9a      	lsrs	r2, r3, #22
 8000658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800065c:	60da      	str	r2, [r3, #12]
	  sprintf(uartBuff, "rand=%u\r\n", fsm.randomDelay);
 800065e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4923      	ldr	r1, [pc, #140]	; (80006f4 <main+0x150>)
 8000668:	4618      	mov	r0, r3
 800066a:	f004 ff77 	bl	800555c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fd85 	bl	8000180 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	1d39      	adds	r1, r7, #4
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	481a      	ldr	r0, [pc, #104]	; (80006ec <main+0x148>)
 8000682:	f004 f982 	bl	800498a <HAL_UART_Transmit>

	  HAL_Delay(fsm.randomDelay);
 8000686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fe93 	bl	80023b8 <HAL_Delay>
	  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	f240 2142 	movw	r1, #578	; 0x242
 800069a:	f240 2042 	movw	r0, #578	; 0x242
 800069e:	f001 f8e9 	bl	8001874 <SUBGRF_SetDioIrqParams>
	                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2001      	movs	r0, #1
 80006a6:	f001 fd03 	bl	80020b0 <SUBGRF_SetSwitch>
	  SUBGRF_SetRx(fsm.rxTimeout << 6);
 80006aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	019b      	lsls	r3, r3, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ffea 	bl	800168c <SUBGRF_SetRx>
	  fsm.state = STATE_MASTER;
 80006b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
	  fsm.subState = SSTATE_RX;
 80006c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006c4:	2201      	movs	r2, #1
 80006c6:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 eventReceptor = NULL;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0x154>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	 while (eventReceptor == NULL);
 80006ce:	bf00      	nop
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <main+0x154>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0fb      	beq.n	80006d0 <main+0x12c>
	 eventReceptor(&fsm);
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <main+0x154>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80006e0:	4610      	mov	r0, r2
 80006e2:	4798      	blx	r3
	 eventReceptor = NULL;
 80006e4:	e7f0      	b.n	80006c8 <main+0x124>
 80006e6:	bf00      	nop
 80006e8:	08005df0 	.word	0x08005df0
 80006ec:	200000d8 	.word	0x200000d8
 80006f0:	08005e24 	.word	0x08005e24
 80006f4:	08005e54 	.word	0x08005e54
 80006f8:	200000b4 	.word	0x200000b4

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09a      	sub	sp, #104	; 0x68
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2248      	movs	r2, #72	; 0x48
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 ff1e 	bl	800554c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <SystemClock_Config+0xa0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <SystemClock_Config+0xa0>)
 800072c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <SystemClock_Config+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800073e:	2320      	movs	r3, #32
 8000740:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000746:	2300      	movs	r3, #0
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800074a:	23b0      	movs	r3, #176	; 0xb0
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074e:	2300      	movs	r3, #0
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fb98 	bl	8002e8c <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000762:	f000 fb75 	bl	8000e50 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000766:	234f      	movs	r3, #79	; 0x4f
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f002 ff1b 	bl	80035c0 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 fb5e 	bl	8000e50 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3768      	adds	r7, #104	; 0x68
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58000400 	.word	0x58000400

080007a0 <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  // Initialize the hardware (SPI bus, TCXO control, RF switch)
  SUBGRF_Init(RadioOnDioIrq);
 80007a6:	4837      	ldr	r0, [pc, #220]	; (8000884 <radioInit+0xe4>)
 80007a8:	f000 fe1a 	bl	80013e0 <SUBGRF_Init>

  // Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
  // "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
  SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80007ac:	f640 1016 	movw	r0, #2326	; 0x916
 80007b0:	f001 fb9e 	bl	8001ef0 <SUBGRF_ReadRegister>
 80007b4:	4603      	mov	r3, r0
 80007b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	f640 1016 	movw	r0, #2326	; 0x916
 80007c2:	f001 fb81 	bl	8001ec8 <SUBGRF_WriteRegister>
  SUBGRF_SetRegulatorMode();
 80007c6:	f000 ff90 	bl	80016ea <SUBGRF_SetRegulatorMode>

  SUBGRF_SetRegulatorMode(  );
 80007ca:	f000 ff8e 	bl	80016ea <SUBGRF_SetRegulatorMode>

	SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 fae3 	bl	8001d9c <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80007d6:	2204      	movs	r2, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	2001      	movs	r0, #1
 80007dc:	f001 f90e 	bl	80019fc <SUBGRF_SetTxParams>
	SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007ec:	f001 f842 	bl	8001874 <SUBGRF_SetDioIrqParams>

  // Use the whole 256-byte buffer for both TX and RX
//  SUBGRF_SetBufferBaseAddress(0x00, 0x00);

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <radioInit+0xe8>)
 80007f2:	f001 f89b 	bl	800192c <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 80007f6:	200e      	movs	r0, #14
 80007f8:	f001 fc82 	bl	8002100 <SUBGRF_SetRfTxPower>
  SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 ff65 	bl	80016cc <SUBGRF_SetStopRxTimerOnPreambleDetect>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000802:	2001      	movs	r0, #1
 8000804:	f001 f8d4 	bl	80019b0 <SUBGRF_SetPacketType>

  SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8000808:	2114      	movs	r1, #20
 800080a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800080e:	f001 fb5b 	bl	8001ec8 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8000812:	2124      	movs	r1, #36	; 0x24
 8000814:	f240 7041 	movw	r0, #1857	; 0x741
 8000818:	f001 fb56 	bl	8001ec8 <SUBGRF_WriteRegister>

  ModulationParams_t modulationParams;
  modulationParams.PacketType = PACKET_TYPE_LORA;
 800081c:	2301      	movs	r3, #1
 800081e:	713b      	strb	r3, [r7, #4]
  modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8000820:	2304      	movs	r3, #4
 8000822:	777b      	strb	r3, [r7, #29]
  modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8000824:	2301      	movs	r3, #1
 8000826:	77bb      	strb	r3, [r7, #30]
  modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
  modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 800082c:	2307      	movs	r3, #7
 800082e:	773b      	strb	r3, [r7, #28]
  SUBGRF_SetModulationParams(&modulationParams);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f948 	bl	8001ac8 <SUBGRF_SetModulationParams>

  packetParams.PacketType = PACKET_TYPE_LORA;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <radioInit+0xec>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
  packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <radioInit+0xec>)
 8000840:	2201      	movs	r2, #1
 8000842:	749a      	strb	r2, [r3, #18]
  packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <radioInit+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	741a      	strb	r2, [r3, #16]
  packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <radioInit+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	74da      	strb	r2, [r3, #19]
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <radioInit+0xec>)
 8000852:	22ff      	movs	r2, #255	; 0xff
 8000854:	745a      	strb	r2, [r3, #17]
  packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <radioInit+0xec>)
 8000858:	2208      	movs	r2, #8
 800085a:	81da      	strh	r2, [r3, #14]
  SUBGRF_SetPacketParams(&packetParams);
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <radioInit+0xec>)
 800085e:	f001 f9ff 	bl	8001c60 <SUBGRF_SetPacketParams>

  //SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

  // WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
  // RegIqPolaritySetup @address 0x0736
  SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8000862:	f240 7036 	movw	r0, #1846	; 0x736
 8000866:	f001 fb43 	bl	8001ef0 <SUBGRF_ReadRegister>
 800086a:	4603      	mov	r3, r0
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4619      	mov	r1, r3
 8000874:	f240 7036 	movw	r0, #1846	; 0x736
 8000878:	f001 fb26 	bl	8001ec8 <SUBGRF_WriteRegister>
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	08000891 	.word	0x08000891
 8000888:	3689cac0 	.word	0x3689cac0
 800088c:	200000b8 	.word	0x200000b8

08000890 <RadioOnDioIrq>:
  * @brief  Receive data trough SUBGHZSPI peripheral
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  switch (radioIrq)
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a0:	d013      	beq.n	80008ca <RadioOnDioIrq+0x3a>
 80008a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a6:	dc26      	bgt.n	80008f6 <RadioOnDioIrq+0x66>
 80008a8:	2b40      	cmp	r3, #64	; 0x40
 80008aa:	d020      	beq.n	80008ee <RadioOnDioIrq+0x5e>
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	dc22      	bgt.n	80008f6 <RadioOnDioIrq+0x66>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d002      	beq.n	80008ba <RadioOnDioIrq+0x2a>
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d004      	beq.n	80008c2 <RadioOnDioIrq+0x32>
      break;
    case IRQ_CRC_ERROR:
      eventReceptor = eventRxError;
      break;
    default:
      break;
 80008b8:	e01d      	b.n	80008f6 <RadioOnDioIrq+0x66>
      eventReceptor = eventTxDone;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <RadioOnDioIrq+0x74>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <RadioOnDioIrq+0x78>)
 80008be:	601a      	str	r2, [r3, #0]
      break;
 80008c0:	e01c      	b.n	80008fc <RadioOnDioIrq+0x6c>
      eventReceptor = eventRxDone;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <RadioOnDioIrq+0x74>)
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <RadioOnDioIrq+0x7c>)
 80008c6:	601a      	str	r2, [r3, #0]
      break;
 80008c8:	e018      	b.n	80008fc <RadioOnDioIrq+0x6c>
      if (SUBGRF_GetOperatingMode() == MODE_TX)
 80008ca:	f000 fdcd 	bl	8001468 <SUBGRF_GetOperatingMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d103      	bne.n	80008dc <RadioOnDioIrq+0x4c>
        eventReceptor = eventTxTimeout;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <RadioOnDioIrq+0x74>)
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <RadioOnDioIrq+0x80>)
 80008d8:	601a      	str	r2, [r3, #0]
      break;
 80008da:	e00e      	b.n	80008fa <RadioOnDioIrq+0x6a>
      else if (SUBGRF_GetOperatingMode() == MODE_RX)
 80008dc:	f000 fdc4 	bl	8001468 <SUBGRF_GetOperatingMode>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b05      	cmp	r3, #5
 80008e4:	d109      	bne.n	80008fa <RadioOnDioIrq+0x6a>
        eventReceptor = eventRxTimeout;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <RadioOnDioIrq+0x74>)
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <RadioOnDioIrq+0x84>)
 80008ea:	601a      	str	r2, [r3, #0]
      break;
 80008ec:	e005      	b.n	80008fa <RadioOnDioIrq+0x6a>
      eventReceptor = eventRxError;
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <RadioOnDioIrq+0x74>)
 80008f0:	4a09      	ldr	r2, [pc, #36]	; (8000918 <RadioOnDioIrq+0x88>)
 80008f2:	601a      	str	r2, [r3, #0]
      break;
 80008f4:	e002      	b.n	80008fc <RadioOnDioIrq+0x6c>
      break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <RadioOnDioIrq+0x6c>
      break;
 80008fa:	bf00      	nop
  }
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000b4 	.word	0x200000b4
 8000908:	0800091d 	.word	0x0800091d
 800090c:	08000985 	.word	0x08000985
 8000910:	08000aa5 	.word	0x08000aa5
 8000914:	08000b0d 	.word	0x08000b0d
 8000918:	08000b79 	.word	0x08000b79

0800091c <eventTxDone>:
  * @brief  Process the TX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxDone(pingPongFSM_t *const fsm)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Done\r\n", 15, HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	220f      	movs	r2, #15
 800092a:	4914      	ldr	r1, [pc, #80]	; (800097c <eventTxDone+0x60>)
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <eventTxDone+0x64>)
 800092e:	f004 f82c 	bl	800498a <HAL_UART_Transmit>
  switch (fsm->state)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d002      	beq.n	8000940 <eventTxDone+0x24>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d00d      	beq.n	800095a <eventTxDone+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 800093e:	e019      	b.n	8000974 <eventTxDone+0x58>
      switch (fsm->subState)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d106      	bne.n	8000956 <eventTxDone+0x3a>
          enterMasterRx(fsm);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f94b 	bl	8000be4 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2201      	movs	r2, #1
 8000952:	705a      	strb	r2, [r3, #1]
          break;
 8000954:	e000      	b.n	8000958 <eventTxDone+0x3c>
          break;
 8000956:	bf00      	nop
      break;
 8000958:	e00c      	b.n	8000974 <eventTxDone+0x58>
      switch (fsm->subState)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d106      	bne.n	8000970 <eventTxDone+0x54>
          enterSlaveRx(fsm);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f96c 	bl	8000c40 <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	705a      	strb	r2, [r3, #1]
          break;
 800096e:	e000      	b.n	8000972 <eventTxDone+0x56>
          break;
 8000970:	bf00      	nop
      break;
 8000972:	bf00      	nop
  }
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08005e60 	.word	0x08005e60
 8000980:	200000d8 	.word	0x200000d8

08000984 <eventRxDone>:
  * @brief  Process the RX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxDone(pingPongFSM_t *const fsm)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Done\r\n", 15, HAL_MAX_DELAY);
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	220f      	movs	r2, #15
 8000992:	493f      	ldr	r1, [pc, #252]	; (8000a90 <eventRxDone+0x10c>)
 8000994:	483f      	ldr	r0, [pc, #252]	; (8000a94 <eventRxDone+0x110>)
 8000996:	f003 fff8 	bl	800498a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, fsm->rxBuffer, fsm->rxSize, HAL_MAX_DELAY);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f103 0110 	add.w	r1, r3, #16
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	4839      	ldr	r0, [pc, #228]	; (8000a94 <eventRxDone+0x110>)
 80009ae:	f003 ffec 	bl	800498a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	2202      	movs	r2, #2
 80009b8:	4937      	ldr	r1, [pc, #220]	; (8000a98 <eventRxDone+0x114>)
 80009ba:	4836      	ldr	r0, [pc, #216]	; (8000a94 <eventRxDone+0x110>)
 80009bc:	f003 ffe5 	bl	800498a <HAL_UART_Transmit>
  switch(fsm->state)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d002      	beq.n	80009ce <eventRxDone+0x4a>
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d035      	beq.n	8000a38 <eventRxDone+0xb4>
        default:
          break;
      }
      break;
    default:
      break;
 80009cc:	e05b      	b.n	8000a86 <eventRxDone+0x102>
      switch (fsm->subState)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d12e      	bne.n	8000a34 <eventRxDone+0xb0>
          transitionRxDone(fsm);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f9f4 	bl	8000dc4 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PONG", 4) == 0)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3310      	adds	r3, #16
 80009e0:	2204      	movs	r2, #4
 80009e2:	492e      	ldr	r1, [pc, #184]	; (8000a9c <eventRxDone+0x118>)
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 fdd9 	bl	800559c <strncmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10c      	bne.n	8000a0a <eventRxDone+0x86>
            BSP_LED_Off(LED_GREEN);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 fbcf 	bl	8001194 <BSP_LED_Off>
            BSP_LED_Toggle(LED_RED);
 80009f6:	2002      	movs	r0, #2
 80009f8:	f000 fbe6 	bl	80011c8 <BSP_LED_Toggle>
            enterMasterTx(fsm);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f94d 	bl	8000c9c <enterMasterTx>
            fsm->subState = SSTATE_TX;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2202      	movs	r2, #2
 8000a06:	705a      	strb	r2, [r3, #1]
          break;
 8000a08:	e015      	b.n	8000a36 <eventRxDone+0xb2>
          else if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3310      	adds	r3, #16
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4923      	ldr	r1, [pc, #140]	; (8000aa0 <eventRxDone+0x11c>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fdc2 	bl	800559c <strncmp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d106      	bne.n	8000a2c <eventRxDone+0xa8>
            enterSlaveRx(fsm);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f90e 	bl	8000c40 <enterSlaveRx>
            fsm->state = STATE_SLAVE;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2202      	movs	r2, #2
 8000a28:	701a      	strb	r2, [r3, #0]
          break;
 8000a2a:	e004      	b.n	8000a36 <eventRxDone+0xb2>
            enterMasterRx(fsm);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f8d9 	bl	8000be4 <enterMasterRx>
          break;
 8000a32:	e000      	b.n	8000a36 <eventRxDone+0xb2>
          break;
 8000a34:	bf00      	nop
      break;
 8000a36:	e026      	b.n	8000a86 <eventRxDone+0x102>
      switch (fsm->subState)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d120      	bne.n	8000a82 <eventRxDone+0xfe>
          transitionRxDone(fsm);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f9bf 	bl	8000dc4 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3310      	adds	r3, #16
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	4914      	ldr	r1, [pc, #80]	; (8000aa0 <eventRxDone+0x11c>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fda4 	bl	800559c <strncmp>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10c      	bne.n	8000a74 <eventRxDone+0xf0>
            BSP_LED_Off(LED_RED);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f000 fb9a 	bl	8001194 <BSP_LED_Off>
            BSP_LED_Toggle(LED_GREEN);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fbb1 	bl	80011c8 <BSP_LED_Toggle>
            enterSlaveTx(fsm);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f962 	bl	8000d30 <enterSlaveTx>
            fsm->subState = SSTATE_TX;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	705a      	strb	r2, [r3, #1]
          break;
 8000a72:	e007      	b.n	8000a84 <eventRxDone+0x100>
            enterMasterRx(fsm);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f8b5 	bl	8000be4 <enterMasterRx>
            fsm->state = STATE_MASTER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
          break;
 8000a80:	e000      	b.n	8000a84 <eventRxDone+0x100>
          break;
 8000a82:	bf00      	nop
      break;
 8000a84:	bf00      	nop
  }
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	08005e70 	.word	0x08005e70
 8000a94:	200000d8 	.word	0x200000d8
 8000a98:	08005e80 	.word	0x08005e80
 8000a9c:	08005e84 	.word	0x08005e84
 8000aa0:	08005e8c 	.word	0x08005e8c

08000aa4 <eventTxTimeout>:
  * @brief  Process the TX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxTimeout(pingPongFSM_t *const fsm)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Timeout\r\n", 18, HAL_MAX_DELAY);
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2212      	movs	r2, #18
 8000ab2:	4914      	ldr	r1, [pc, #80]	; (8000b04 <eventTxTimeout+0x60>)
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <eventTxTimeout+0x64>)
 8000ab6:	f003 ff68 	bl	800498a <HAL_UART_Transmit>
  switch (fsm->state)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <eventTxTimeout+0x24>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d00d      	beq.n	8000ae2 <eventTxTimeout+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 8000ac6:	e019      	b.n	8000afc <eventTxTimeout+0x58>
      switch (fsm->subState)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d106      	bne.n	8000ade <eventTxTimeout+0x3a>
          enterMasterRx(fsm);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f887 	bl	8000be4 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	705a      	strb	r2, [r3, #1]
          break;
 8000adc:	e000      	b.n	8000ae0 <eventTxTimeout+0x3c>
          break;
 8000ade:	bf00      	nop
      break;
 8000ae0:	e00c      	b.n	8000afc <eventTxTimeout+0x58>
      switch (fsm->subState)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d106      	bne.n	8000af8 <eventTxTimeout+0x54>
          enterSlaveRx(fsm);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f8a8 	bl	8000c40 <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	705a      	strb	r2, [r3, #1]
          break;
 8000af6:	e000      	b.n	8000afa <eventTxTimeout+0x56>
          break;
 8000af8:	bf00      	nop
      break;
 8000afa:	bf00      	nop
  }
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08005e94 	.word	0x08005e94
 8000b08:	200000d8 	.word	0x200000d8

08000b0c <eventRxTimeout>:
  * @brief  Process the RX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	2212      	movs	r2, #18
 8000b1a:	4915      	ldr	r1, [pc, #84]	; (8000b70 <eventRxTimeout+0x64>)
 8000b1c:	4815      	ldr	r0, [pc, #84]	; (8000b74 <eventRxTimeout+0x68>)
 8000b1e:	f003 ff34 	bl	800498a <HAL_UART_Transmit>
  switch (fsm->state)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <eventRxTimeout+0x24>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d012      	beq.n	8000b54 <eventRxTimeout+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8000b2e:	e01b      	b.n	8000b68 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <eventRxTimeout+0x44>
          HAL_Delay(fsm->randomDelay);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fc3b 	bl	80023b8 <HAL_Delay>
          enterMasterTx(fsm);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f8aa 	bl	8000c9c <enterMasterTx>
          fsm->subState = SSTATE_TX;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	705a      	strb	r2, [r3, #1]
          break;
 8000b4e:	e000      	b.n	8000b52 <eventRxTimeout+0x46>
          break;
 8000b50:	bf00      	nop
      break;
 8000b52:	e009      	b.n	8000b68 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d103      	bne.n	8000b64 <eventRxTimeout+0x58>
          enterSlaveRx(fsm);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f86f 	bl	8000c40 <enterSlaveRx>
          break;
 8000b62:	e000      	b.n	8000b66 <eventRxTimeout+0x5a>
          break;
 8000b64:	bf00      	nop
      break;
 8000b66:	bf00      	nop
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	08005ea8 	.word	0x08005ea8
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <eventRxError>:
  * @brief  Process the RX Error event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxError(pingPongFSM_t *const fsm)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event Rx Error\r\n", 16, HAL_MAX_DELAY);
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	2210      	movs	r2, #16
 8000b86:	4915      	ldr	r1, [pc, #84]	; (8000bdc <eventRxError+0x64>)
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <eventRxError+0x68>)
 8000b8a:	f003 fefe 	bl	800498a <HAL_UART_Transmit>
  switch (fsm->state)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d002      	beq.n	8000b9c <eventRxError+0x24>
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d012      	beq.n	8000bc0 <eventRxError+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8000b9a:	e01b      	b.n	8000bd4 <eventRxError+0x5c>
      switch (fsm->subState)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10b      	bne.n	8000bbc <eventRxError+0x44>
          HAL_Delay(fsm->randomDelay);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fc05 	bl	80023b8 <HAL_Delay>
          enterMasterTx(fsm);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f874 	bl	8000c9c <enterMasterTx>
          fsm->subState = SSTATE_TX;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	705a      	strb	r2, [r3, #1]
          break;
 8000bba:	e000      	b.n	8000bbe <eventRxError+0x46>
          break;
 8000bbc:	bf00      	nop
      break;
 8000bbe:	e009      	b.n	8000bd4 <eventRxError+0x5c>
      switch (fsm->subState)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d103      	bne.n	8000bd0 <eventRxError+0x58>
          enterSlaveRx(fsm);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f839 	bl	8000c40 <enterSlaveRx>
          break;
 8000bce:	e000      	b.n	8000bd2 <eventRxError+0x5a>
          break;
 8000bd0:	bf00      	nop
      break;
 8000bd2:	bf00      	nop
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	08005ebc 	.word	0x08005ebc
 8000be0:	200000d8 	.word	0x200000d8

08000be4 <enterMasterRx>:
  * @brief  Entry actions for the RX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, "Master Rx start\r\n", 17, HAL_MAX_DELAY);
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	2211      	movs	r2, #17
 8000bf2:	4910      	ldr	r1, [pc, #64]	; (8000c34 <enterMasterRx+0x50>)
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <enterMasterRx+0x54>)
 8000bf6:	f003 fec8 	bl	800498a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f240 2162 	movw	r1, #610	; 0x262
 8000c02:	f240 2062 	movw	r0, #610	; 0x262
 8000c06:	f000 fe35 	bl	8001874 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fa4f 	bl	80020b0 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <enterMasterRx+0x58>)
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <enterMasterRx+0x58>)
 8000c1a:	f001 f821 	bl	8001c60 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	019b      	lsls	r3, r3, #6
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fd31 	bl	800168c <SUBGRF_SetRx>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	08005ed0 	.word	0x08005ed0
 8000c38:	200000d8 	.word	0x200000d8
 8000c3c:	200000b8 	.word	0x200000b8

08000c40 <enterSlaveRx>:
  * @brief  Entry actions for the RX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveRx(pingPongFSM_t *const fsm)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, "Slave Rx start\r\n", 16, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4910      	ldr	r1, [pc, #64]	; (8000c90 <enterSlaveRx+0x50>)
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <enterSlaveRx+0x54>)
 8000c52:	f003 fe9a 	bl	800498a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f240 2162 	movw	r1, #610	; 0x262
 8000c5e:	f240 2062 	movw	r0, #610	; 0x262
 8000c62:	f000 fe07 	bl	8001874 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f001 fa21 	bl	80020b0 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <enterSlaveRx+0x58>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <enterSlaveRx+0x58>)
 8000c76:	f000 fff3 	bl	8001c60 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	019b      	lsls	r3, r3, #6
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fd03 	bl	800168c <SUBGRF_SetRx>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08005ee4 	.word	0x08005ee4
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	200000b8 	.word	0x200000b8

08000c9c <enterMasterTx>:
  * @brief  Entry actions for the TX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 fb85 	bl	80023b8 <HAL_Delay>

  HAL_UART_Transmit(&huart2, "...PING\r\n", 9, HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2209      	movs	r2, #9
 8000cb4:	4919      	ldr	r1, [pc, #100]	; (8000d1c <enterMasterTx+0x80>)
 8000cb6:	481a      	ldr	r0, [pc, #104]	; (8000d20 <enterMasterTx+0x84>)
 8000cb8:	f003 fe67 	bl	800498a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "Master Tx start\r\n", 17, HAL_MAX_DELAY);
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2211      	movs	r2, #17
 8000cc2:	4918      	ldr	r1, [pc, #96]	; (8000d24 <enterMasterTx+0x88>)
 8000cc4:	4816      	ldr	r0, [pc, #88]	; (8000d20 <enterMasterTx+0x84>)
 8000cc6:	f003 fe60 	bl	800498a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f240 2101 	movw	r1, #513	; 0x201
 8000cd2:	f240 2001 	movw	r0, #513	; 0x201
 8000cd6:	f000 fdcd 	bl	8001874 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f001 f9e7 	bl	80020b0 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000ce2:	f640 0089 	movw	r0, #2185	; 0x889
 8000ce6:	f001 f903 	bl	8001ef0 <SUBGRF_ReadRegister>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f640 0089 	movw	r0, #2185	; 0x889
 8000cf8:	f001 f8e6 	bl	8001ec8 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <enterMasterTx+0x8c>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000d02:	4809      	ldr	r0, [pc, #36]	; (8000d28 <enterMasterTx+0x8c>)
 8000d04:	f000 ffac 	bl	8001c60 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PING", 4, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <enterMasterTx+0x90>)
 8000d0e:	f000 fbe7 	bl	80014e0 <SUBGRF_SendPayload>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08005ef8 	.word	0x08005ef8
 8000d20:	200000d8 	.word	0x200000d8
 8000d24:	08005f04 	.word	0x08005f04
 8000d28:	200000b8 	.word	0x200000b8
 8000d2c:	08005e8c 	.word	0x08005e8c

08000d30 <enterSlaveTx>:
  * @brief  Entry actions for the TX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveTx(pingPongFSM_t *const fsm)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fb3b 	bl	80023b8 <HAL_Delay>

  HAL_UART_Transmit(&huart2, "...PONG\r\n", 9, HAL_MAX_DELAY);
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	2209      	movs	r2, #9
 8000d48:	4919      	ldr	r1, [pc, #100]	; (8000db0 <enterSlaveTx+0x80>)
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <enterSlaveTx+0x84>)
 8000d4c:	f003 fe1d 	bl	800498a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, "Slave Tx start\r\n", 16, HAL_MAX_DELAY);
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	2210      	movs	r2, #16
 8000d56:	4918      	ldr	r1, [pc, #96]	; (8000db8 <enterSlaveTx+0x88>)
 8000d58:	4816      	ldr	r0, [pc, #88]	; (8000db4 <enterSlaveTx+0x84>)
 8000d5a:	f003 fe16 	bl	800498a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2200      	movs	r2, #0
 8000d62:	f240 2101 	movw	r1, #513	; 0x201
 8000d66:	f240 2001 	movw	r0, #513	; 0x201
 8000d6a:	f000 fd83 	bl	8001874 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 f99d 	bl	80020b0 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000d76:	f640 0089 	movw	r0, #2185	; 0x889
 8000d7a:	f001 f8b9 	bl	8001ef0 <SUBGRF_ReadRegister>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	f640 0089 	movw	r0, #2185	; 0x889
 8000d8c:	f001 f89c 	bl	8001ec8 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <enterSlaveTx+0x8c>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <enterSlaveTx+0x8c>)
 8000d98:	f000 ff62 	bl	8001c60 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PONG", 4, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <enterSlaveTx+0x90>)
 8000da2:	f000 fb9d 	bl	80014e0 <SUBGRF_SendPayload>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08005f18 	.word	0x08005f18
 8000db4:	200000d8 	.word	0x200000d8
 8000db8:	08005f24 	.word	0x08005f24
 8000dbc:	200000b8 	.word	0x200000b8
 8000dc0:	08005e84 	.word	0x08005e84

08000dc4 <transitionRxDone>:
  * @brief  Transition actions executed on every RX Done event (helper function)
  * @param  fsm pointer to FSM context
  * @retval None
  */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  int32_t cfo;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f44f 6012 	mov.w	r0, #2336	; 0x920
 8000dd2:	f001 f879 	bl	8001ec8 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000dd6:	f640 1044 	movw	r0, #2372	; 0x944
 8000dda:	f001 f889 	bl	8001ef0 <SUBGRF_ReadRegister>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	f640 1044 	movw	r0, #2372	; 0x944
 8000dec:	f001 f86c 	bl	8001ec8 <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f103 0010 	add.w	r0, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000dfc:	22ff      	movs	r2, #255	; 0xff
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f000 fb4c 	bl	800149c <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 8000e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f80b 	bl	8001e24 <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8000e0e:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8000e12:	461a      	mov	r2, r3
 8000e14:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8000e18:	f107 0008 	add.w	r0, r7, #8
 8000e1c:	490a      	ldr	r1, [pc, #40]	; (8000e48 <transitionRxDone+0x84>)
 8000e1e:	f004 fb9d 	bl	800555c <siprintf>
  HAL_UART_Transmit(&huart2, uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f9aa 	bl	8000180 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <transitionRxDone+0x88>)
 8000e3a:	f003 fda6 	bl	800498a <HAL_UART_Transmit>
}
 8000e3e:	bf00      	nop
 8000e40:	3750      	adds	r7, #80	; 0x50
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	08005f38 	.word	0x08005f38
 8000e4c:	200000d8 	.word	0x200000d8

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>

08000e5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <HardFault_Handler+0x4>

08000e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <BusFault_Handler+0x4>

08000e7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f001 fa68 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000eba:	f003 fb57 	bl	800456c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000cc 	.word	0x200000cc

08000ec8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_SUBGHZ_Init+0x20>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_SUBGHZ_Init+0x20>)
 8000f04:	f003 f8b6 	bl	8004074 <HAL_SUBGHZ_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000f0e:	f7ff ff9f 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000cc 	.word	0x200000cc

08000f1c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff ffcf 	bl	8000ec8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2032      	movs	r0, #50	; 0x32
 8000f30:	f001 fb3d 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000f34:	2032      	movs	r0, #50	; 0x32
 8000f36:	f001 fb54 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f004 fac0 	bl	80054f8 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20010000 	.word	0x20010000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	20000180 	.word	0x20000180

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <LL_AHB2_GRP1_EnableClock>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <LL_APB1_GRP1_EnableClock>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001010:	68fb      	ldr	r3, [r7, #12]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <MX_USART2_UART_Init+0x94>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_USART2_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_USART2_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART2_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001066:	f003 fc40 	bl	80048ea <HAL_UART_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001070:	f7ff feee 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_USART2_UART_Init+0x90>)
 8001078:	f004 f95a 	bl	8005330 <HAL_UARTEx_SetTxFifoThreshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001082:	f7ff fee5 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x90>)
 800108a:	f004 f98f 	bl	80053ac <HAL_UARTEx_SetRxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001094:	f7ff fedc 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_USART2_UART_Init+0x90>)
 800109a:	f004 f911 	bl	80052c0 <HAL_UARTEx_DisableFifoMode>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010a4:	f7ff fed4 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000d8 	.word	0x200000d8
 80010b0:	40004400 	.word	0x40004400

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	; 0x58
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2238      	movs	r2, #56	; 0x38
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fa39 	bl	800554c <memset>
  if(uartHandle->Instance==USART2)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_UART_MspInit+0x88>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d126      	bne.n	8001132 <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fe0a 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff fea7 	bl	8000e50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001102:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001106:	f7ff ff71 	bl	8000fec <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff ff56 	bl	8000fbc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001110:	230c      	movs	r3, #12
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001120:	2307      	movs	r3, #7
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f001 fa73 	bl	8002618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3758      	adds	r7, #88	; 0x58
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004400 	.word	0x40004400

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001144:	f7ff ff34 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116e:	f004 f9c9 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fa17 	bl	80005a4 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001184:	080060a0 	.word	0x080060a0
  ldr r2, =_sbss
 8001188:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800118c:	2000017c 	.word	0x2000017c

08001190 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <BSP_LED_Off+0x2c>)
 80011a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <BSP_LED_Off+0x30>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	f001 fb91 	bl	80028d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000004 	.word	0x20000004
 80011c4:	0800602c 	.word	0x0800602c

080011c8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <BSP_LED_Toggle+0x2c>)
 80011d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <BSP_LED_Toggle+0x30>)
 80011de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4610      	mov	r0, r2
 80011e6:	f001 fb8e 	bl	8002906 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000004 	.word	0x20000004
 80011f8:	0800602c 	.word	0x0800602c

080011fc <LL_AHB2_GRP1_EnableClock>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001240:	2004      	movs	r0, #4
 8001242:	f7ff ffdb 	bl	80011fc <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001246:	2310      	movs	r3, #16
 8001248:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4812      	ldr	r0, [pc, #72]	; (80012a4 <BSP_RADIO_Init+0x78>)
 800125c:	f001 f9dc 	bl	8002618 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001260:	2320      	movs	r3, #32
 8001262:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <BSP_RADIO_Init+0x78>)
 800126a:	f001 f9d5 	bl	8002618 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800126e:	2308      	movs	r3, #8
 8001270:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <BSP_RADIO_Init+0x78>)
 8001278:	f001 f9ce 	bl	8002618 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800127c:	2200      	movs	r2, #0
 800127e:	2120      	movs	r1, #32
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <BSP_RADIO_Init+0x78>)
 8001282:	f001 fb29 	bl	80028d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001286:	2200      	movs	r2, #0
 8001288:	2110      	movs	r1, #16
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <BSP_RADIO_Init+0x78>)
 800128c:	f001 fb24 	bl	80028d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001290:	2200      	movs	r2, #0
 8001292:	2108      	movs	r1, #8
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <BSP_RADIO_Init+0x78>)
 8001296:	f001 fb1f 	bl	80028d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800

080012a8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d84b      	bhi.n	8001350 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012f1 	.word	0x080012f1
 80012c8:	08001311 	.word	0x08001311
 80012cc:	08001331 	.word	0x08001331
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2108      	movs	r1, #8
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012d6:	f001 faff 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2110      	movs	r1, #16
 80012de:	481f      	ldr	r0, [pc, #124]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012e0:	f001 fafa 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012ea:	f001 faf5 	bl	80028d8 <HAL_GPIO_WritePin>
      break;      
 80012ee:	e030      	b.n	8001352 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2108      	movs	r1, #8
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012f6:	f001 faef 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80012fa:	2201      	movs	r2, #1
 80012fc:	2110      	movs	r1, #16
 80012fe:	4817      	ldr	r0, [pc, #92]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001300:	f001 faea 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800130a:	f001 fae5 	bl	80028d8 <HAL_GPIO_WritePin>
      break;
 800130e:	e020      	b.n	8001352 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	2108      	movs	r1, #8
 8001314:	4811      	ldr	r0, [pc, #68]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001316:	f001 fadf 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800131a:	2201      	movs	r2, #1
 800131c:	2110      	movs	r1, #16
 800131e:	480f      	ldr	r0, [pc, #60]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001320:	f001 fada 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001324:	2201      	movs	r2, #1
 8001326:	2120      	movs	r1, #32
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800132a:	f001 fad5 	bl	80028d8 <HAL_GPIO_WritePin>
      break;
 800132e:	e010      	b.n	8001352 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2108      	movs	r1, #8
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001336:	f001 facf 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001340:	f001 faca 	bl	80028d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001344:	2201      	movs	r2, #1
 8001346:	2120      	movs	r1, #32
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800134a:	f001 fac5 	bl	80028d8 <HAL_GPIO_WritePin>
      break;
 800134e:	e000      	b.n	8001352 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001350:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	48000800 	.word	0x48000800

08001360 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800138e:	f7ff ff4d 	bl	800122c <BSP_RADIO_Init>
 8001392:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}

08001398 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff7f 	bl	80012a8 <BSP_RADIO_ConfigRFSwitch>
 80013aa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80013b8:	f7ff ffd2 	bl	8001360 <BSP_RADIO_GetTxConfig>
 80013bc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80013c6:	f7ff ffd2 	bl	800136e <BSP_RADIO_IsTCXO>
 80013ca:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80013d4:	f7ff ffd2 	bl	800137c <BSP_RADIO_IsDCDC>
 80013d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <SUBGRF_Init+0x7c>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80013f4:	f7ff fd80 	bl	8000ef8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 ff45 	bl	8002288 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <SUBGRF_Init+0x80>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f905 	bl	8001614 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800140a:	f7ff ffda 	bl	80013c2 <RBI_IsTCXO>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10f      	bne.n	8001434 <SUBGRF_Init+0x54>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001414:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fa65 	bl	80018e8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800141e:	2100      	movs	r1, #0
 8001420:	f640 1011 	movw	r0, #2321	; 0x911
 8001424:	f000 fd50 	bl	8001ec8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8001428:	237f      	movs	r3, #127	; 0x7f
 800142a:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800142c:	7b38      	ldrb	r0, [r7, #12]
 800142e:	f000 f973 	bl	8001718 <SUBGRF_Calibrate>
 8001432:	e009      	b.n	8001448 <SUBGRF_Init+0x68>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001434:	2120      	movs	r1, #32
 8001436:	f640 1011 	movw	r0, #2321	; 0x911
 800143a:	f000 fd45 	bl	8001ec8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800143e:	2120      	movs	r1, #32
 8001440:	f640 1012 	movw	r0, #2322	; 0x912
 8001444:	f000 fd40 	bl	8001ec8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8001448:	f7ff ff9f 	bl	800138a <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SUBGRF_Init+0x84>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000a8 	.word	0x200000a8
 8001460:	200000a4 	.word	0x200000a4
 8001464:	2000009c 	.word	0x2000009c

08001468 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <SUBGRF_GetOperatingMode+0x10>)
 800146e:	781b      	ldrb	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	2000009c 	.word	0x2000009c

0800147c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	461a      	mov	r2, r3
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	2000      	movs	r0, #0
 8001490:	f000 fd86 	bl	8001fa0 <SUBGRF_WriteBuffer>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80014ae:	f107 0317 	add.w	r3, r7, #23
 80014b2:	4619      	mov	r1, r3
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f000 fc89 	bl	8001dcc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d201      	bcs.n	80014c8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e007      	b.n	80014d8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80014c8:	7df8      	ldrb	r0, [r7, #23]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	f000 fd87 	bl	8001fe4 <SUBGRF_ReadBuffer>

    return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	4619      	mov	r1, r3
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7ff ffc2 	bl	800147c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8a7 	bl	800164c <SUBGRF_SetTx>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001520:	f000 fa62 	bl	80019e8 <SUBGRF_GetPacketType>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2202      	movs	r2, #2
 8001530:	4619      	mov	r1, r3
 8001532:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8001536:	f000 fcef 	bl	8001f18 <SUBGRF_WriteRegisters>
            break;
 800153a:	e000      	b.n	800153e <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800153c:	bf00      	nop
    }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001560:	f000 fa42 	bl	80019e8 <SUBGRF_GetPacketType>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2202      	movs	r2, #2
 8001570:	4619      	mov	r1, r3
 8001572:	f240 60be 	movw	r0, #1726	; 0x6be
 8001576:	f000 fccf 	bl	8001f18 <SUBGRF_WriteRegisters>
            break;
 800157a:	e000      	b.n	800157e <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800157c:	bf00      	nop
    }
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8001598:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800159c:	f000 fca8 	bl	8001ef0 <SUBGRF_ReadRegister>
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80015b2:	f000 fc89 	bl	8001ec8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80015b6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80015ba:	f000 fc99 	bl	8001ef0 <SUBGRF_ReadRegister>
 80015be:	4603      	mov	r3, r0
 80015c0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80015d0:	f000 fc7a 	bl	8001ec8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80015d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80015d8:	f000 f858 	bl	800168c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80015dc:	463b      	mov	r3, r7
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	f640 0019 	movw	r0, #2073	; 0x819
 80015e6:	f000 fcb9 	bl	8001f5c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f812 	bl	8001614 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4619      	mov	r1, r3
 80015f4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80015f8:	f000 fc66 	bl	8001ec8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	4619      	mov	r1, r3
 8001600:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001604:	f000 fc60 	bl	8001ec8 <SUBGRF_WriteRegister>

    return number;
 8001608:	683b      	ldr	r3, [r7, #0]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	2080      	movs	r0, #128	; 0x80
 8001626:	f000 fcff 	bl	8002028 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SUBGRF_SetStandby+0x34>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001636:	e002      	b.n	800163e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <SUBGRF_SetStandby+0x34>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000009c 	.word	0x2000009c

0800164c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <SUBGRF_SetTx+0x3c>)
 8001656:	2204      	movs	r2, #4
 8001658:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b2db      	uxtb	r3, r3
 8001668:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2203      	movs	r2, #3
 8001676:	4619      	mov	r1, r3
 8001678:	2083      	movs	r0, #131	; 0x83
 800167a:	f000 fcd5 	bl	8002028 <SUBGRF_WriteCommand>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000009c 	.word	0x2000009c

0800168c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <SUBGRF_SetRx+0x3c>)
 8001696:	2205      	movs	r2, #5
 8001698:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2203      	movs	r2, #3
 80016b6:	4619      	mov	r1, r3
 80016b8:	2082      	movs	r0, #130	; 0x82
 80016ba:	f000 fcb5 	bl	8002028 <SUBGRF_WriteCommand>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000009c 	.word	0x2000009c

080016cc <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	2201      	movs	r2, #1
 80016da:	4619      	mov	r1, r3
 80016dc:	209f      	movs	r0, #159	; 0x9f
 80016de:	f000 fca3 	bl	8002028 <SUBGRF_WriteCommand>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80016f0:	f7ff fe6e 	bl	80013d0 <RBI_IsDCDC>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	2096      	movs	r0, #150	; 0x96
 800170c:	f000 fc8c 	bl	8002028 <SUBGRF_WriteCommand>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800172c:	793b      	ldrb	r3, [r7, #4]
 800172e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001736:	b25b      	sxtb	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800173c:	793b      	ldrb	r3, [r7, #4]
 800173e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800174c:	793b      	ldrb	r3, [r7, #4]
 800174e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001756:	b25b      	sxtb	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800175c:	793b      	ldrb	r3, [r7, #4]
 800175e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800176c:	793b      	ldrb	r3, [r7, #4]
 800176e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800177c:	793b      	ldrb	r3, [r7, #4]
 800177e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001786:	4313      	orrs	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800178c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800178e:	f107 030f 	add.w	r3, r7, #15
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	2089      	movs	r0, #137	; 0x89
 8001798:	f000 fc46 	bl	8002028 <SUBGRF_WriteCommand>
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a1b      	ldr	r2, [pc, #108]	; (800181c <SUBGRF_CalibrateImage+0x78>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d904      	bls.n	80017be <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80017b4:	23e1      	movs	r3, #225	; 0xe1
 80017b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80017b8:	23e9      	movs	r3, #233	; 0xe9
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e022      	b.n	8001804 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <SUBGRF_CalibrateImage+0x7c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d904      	bls.n	80017d0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80017c6:	23d7      	movs	r3, #215	; 0xd7
 80017c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80017ca:	23db      	movs	r3, #219	; 0xdb
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	e019      	b.n	8001804 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <SUBGRF_CalibrateImage+0x80>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d904      	bls.n	80017e2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80017d8:	23c1      	movs	r3, #193	; 0xc1
 80017da:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80017dc:	23c5      	movs	r3, #197	; 0xc5
 80017de:	737b      	strb	r3, [r7, #13]
 80017e0:	e010      	b.n	8001804 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a10      	ldr	r2, [pc, #64]	; (8001828 <SUBGRF_CalibrateImage+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d904      	bls.n	80017f4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80017ea:	2375      	movs	r3, #117	; 0x75
 80017ec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80017ee:	2381      	movs	r3, #129	; 0x81
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	e007      	b.n	8001804 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <SUBGRF_CalibrateImage+0x88>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d903      	bls.n	8001804 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80017fc:	236b      	movs	r3, #107	; 0x6b
 80017fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001800:	236f      	movs	r3, #111	; 0x6f
 8001802:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2202      	movs	r2, #2
 800180a:	4619      	mov	r1, r3
 800180c:	2098      	movs	r0, #152	; 0x98
 800180e:	f000 fc0b 	bl	8002028 <SUBGRF_WriteCommand>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	35a4e900 	.word	0x35a4e900
 8001820:	32a9f880 	.word	0x32a9f880
 8001824:	2de54480 	.word	0x2de54480
 8001828:	1b6b0b00 	.word	0x1b6b0b00
 800182c:	1954fc40 	.word	0x1954fc40

08001830 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	4603      	mov	r3, r0
 8001844:	71bb      	strb	r3, [r7, #6]
 8001846:	460b      	mov	r3, r1
 8001848:	717b      	strb	r3, [r7, #5]
 800184a:	4613      	mov	r3, r2
 800184c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8001856:	797b      	ldrb	r3, [r7, #5]
 8001858:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2204      	movs	r2, #4
 8001864:	4619      	mov	r1, r3
 8001866:	2095      	movs	r0, #149	; 0x95
 8001868:	f000 fbde 	bl	8002028 <SUBGRF_WriteCommand>
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	4604      	mov	r4, r0
 800187c:	4608      	mov	r0, r1
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	4623      	mov	r3, r4
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	4603      	mov	r3, r0
 8001888:	80bb      	strh	r3, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80018c2:	883b      	ldrh	r3, [r7, #0]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2208      	movs	r2, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	2008      	movs	r0, #8
 80018dc:	f000 fba4 	bl	8002028 <SUBGRF_WriteCommand>
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	b2db      	uxtb	r3, r3
 8001904:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	2097      	movs	r0, #151	; 0x97
 800191e:	f000 fb83 	bl	8002028 <SUBGRF_WriteCommand>
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <SUBGRF_SetRfFrequency+0x7c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff2c 	bl	80017a4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <SUBGRF_SetRfFrequency+0x7c>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	461a      	mov	r2, r3
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	09d5      	lsrs	r5, r2, #7
 800195c:	0654      	lsls	r4, r2, #25
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <SUBGRF_SetRfFrequency+0x80>)
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc62 	bl	8000230 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0e1b      	lsrs	r3, r3, #24
 8001978:	b2db      	uxtb	r3, r3
 800197a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	b2db      	uxtb	r3, r3
 8001982:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b2db      	uxtb	r3, r3
 800198a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	2204      	movs	r2, #4
 8001998:	4619      	mov	r1, r3
 800199a:	2086      	movs	r0, #134	; 0x86
 800199c:	f000 fb44 	bl	8002028 <SUBGRF_WriteCommand>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	200000a4 	.word	0x200000a4
 80019ac:	01e84800 	.word	0x01e84800

080019b0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <SUBGRF_SetPacketType+0x34>)
 80019be:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80019c6:	2100      	movs	r1, #0
 80019c8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80019cc:	f000 fa7c 	bl	8001ec8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80019d0:	1dfb      	adds	r3, r7, #7
 80019d2:	2201      	movs	r2, #1
 80019d4:	4619      	mov	r1, r3
 80019d6:	208a      	movs	r0, #138	; 0x8a
 80019d8:	f000 fb26 	bl	8002028 <SUBGRF_WriteCommand>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000009d 	.word	0x2000009d

080019e8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
    return PacketType;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <SUBGRF_GetPacketType+0x10>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000009d 	.word	0x2000009d

080019fc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	460b      	mov	r3, r1
 8001a08:	71bb      	strb	r3, [r7, #6]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d124      	bne.n	8001a5e <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8001a14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d106      	bne.n	8001a2a <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	2006      	movs	r0, #6
 8001a24:	f7ff ff04 	bl	8001830 <SUBGRF_SetPaConfig>
 8001a28:	e005      	b.n	8001a36 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2004      	movs	r0, #4
 8001a32:	f7ff fefd 	bl	8001830 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8001a36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a3a:	2b0d      	cmp	r3, #13
 8001a3c:	dd02      	ble.n	8001a44 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8001a3e:	230e      	movs	r3, #14
 8001a40:	71bb      	strb	r3, [r7, #6]
 8001a42:	e006      	b.n	8001a52 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8001a44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a48:	f113 0f11 	cmn.w	r3, #17
 8001a4c:	da01      	bge.n	8001a52 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8001a4e:	23ef      	movs	r3, #239	; 0xef
 8001a50:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8001a52:	2118      	movs	r1, #24
 8001a54:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8001a58:	f000 fa36 	bl	8001ec8 <SUBGRF_WriteRegister>
 8001a5c:	e025      	b.n	8001aaa <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8001a5e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8001a62:	f000 fa45 	bl	8001ef0 <SUBGRF_ReadRegister>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f043 031e 	orr.w	r3, r3, #30
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8001a74:	f000 fa28 	bl	8001ec8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	2004      	movs	r0, #4
 8001a80:	f7ff fed6 	bl	8001830 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8001a84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a88:	2b16      	cmp	r3, #22
 8001a8a:	dd02      	ble.n	8001a92 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8001a8c:	2316      	movs	r3, #22
 8001a8e:	71bb      	strb	r3, [r7, #6]
 8001a90:	e006      	b.n	8001aa0 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8001a92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a96:	f113 0f09 	cmn.w	r3, #9
 8001a9a:	da01      	bge.n	8001aa0 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8001a9c:	23f7      	movs	r3, #247	; 0xf7
 8001a9e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8001aa0:	2138      	movs	r1, #56	; 0x38
 8001aa2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8001aa6:	f000 fa0f 	bl	8001ec8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	208e      	movs	r0, #142	; 0x8e
 8001abc:	f000 fab4 	bl	8002028 <SUBGRF_WriteCommand>
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <SUBGRF_SetModulationParams+0x188>)
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ade:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <SUBGRF_SetModulationParams+0x18c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d004      	beq.n	8001af8 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff5c 	bl	80019b0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	f200 80a2 	bhi.w	8001c46 <SUBGRF_SetModulationParams+0x17e>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <SUBGRF_SetModulationParams+0x40>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001b97 	.word	0x08001b97
 8001b14:	08001c03 	.word	0x08001c03
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <SUBGRF_SetModulationParams+0x190>)
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7b1b      	ldrb	r3, [r3, #12]
 8001b42:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b5b      	ldrb	r3, [r3, #13]
 8001b48:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	09d5      	lsrs	r5, r2, #7
 8001b56:	0654      	lsls	r4, r2, #25
 8001b58:	4a40      	ldr	r2, [pc, #256]	; (8001c5c <SUBGRF_SetModulationParams+0x194>)
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fb65 	bl	8000230 <__aeabi_uldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	208b      	movs	r0, #139	; 0x8b
 8001b90:	f000 fa4a 	bl	8002028 <SUBGRF_WriteCommand>
        break;
 8001b94:	e058      	b.n	8001c48 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001b96:	2304      	movs	r3, #4
 8001b98:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <SUBGRF_SetModulationParams+0x190>)
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7d1b      	ldrb	r3, [r3, #20]
 8001bc0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001bc2:	7cfb      	ldrb	r3, [r7, #19]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	208b      	movs	r0, #139	; 0x8b
 8001bce:	f000 fa2b 	bl	8002028 <SUBGRF_WriteCommand>
        break;
 8001bd2:	e039      	b.n	8001c48 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
 8001bdc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7e5b      	ldrb	r3, [r3, #25]
 8001be2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e9b      	ldrb	r3, [r3, #26]
 8001be8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7edb      	ldrb	r3, [r3, #27]
 8001bee:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	208b      	movs	r0, #139	; 0x8b
 8001bfc:	f000 fa14 	bl	8002028 <SUBGRF_WriteCommand>

        break;
 8001c00:	e022      	b.n	8001c48 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001c02:	2305      	movs	r3, #5
 8001c04:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <SUBGRF_SetModulationParams+0x190>)
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b5b      	ldrb	r3, [r3, #13]
 8001c32:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001c34:	7cfb      	ldrb	r3, [r7, #19]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	208b      	movs	r0, #139	; 0x8b
 8001c40:	f000 f9f2 	bl	8002028 <SUBGRF_WriteCommand>
        break;
 8001c44:	e000      	b.n	8001c48 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001c46:	bf00      	nop
    }
}
 8001c48:	bf00      	nop
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	08005f5c 	.word	0x08005f5c
 8001c54:	2000009d 	.word	0x2000009d
 8001c58:	3d090000 	.word	0x3d090000
 8001c5c:	01e84800 	.word	0x01e84800

08001c60 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <SUBGRF_SetPacketParams+0x130>)
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c74:	c303      	stmia	r3!, {r0, r1}
 8001c76:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <SUBGRF_SetPacketParams+0x134>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d004      	beq.n	8001c8e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fe91 	bl	80019b0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d878      	bhi.n	8001d88 <SUBGRF_SetPacketParams+0x128>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <SUBGRF_SetPacketParams+0x3c>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001d3d 	.word	0x08001d3d
 8001ca4:	08001d31 	.word	0x08001d31
 8001ca8:	08001cad 	.word	0x08001cad
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7a5b      	ldrb	r3, [r3, #9]
 8001cb0:	2bf1      	cmp	r3, #241	; 0xf1
 8001cb2:	d10a      	bne.n	8001cca <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001cb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cb8:	f7ff fc25 	bl	8001506 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001cbc:	f248 0005 	movw	r0, #32773	; 0x8005
 8001cc0:	f7ff fc41 	bl	8001546 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	75bb      	strb	r3, [r7, #22]
 8001cc8:	e011      	b.n	8001cee <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7a5b      	ldrb	r3, [r3, #9]
 8001cce:	2bf2      	cmp	r3, #242	; 0xf2
 8001cd0:	d10a      	bne.n	8001ce8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001cd2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8001cd6:	f7ff fc16 	bl	8001506 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001cda:	f241 0021 	movw	r0, #4129	; 0x1021
 8001cde:	f7ff fc32 	bl	8001546 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	75bb      	strb	r3, [r7, #22]
 8001ce6:	e002      	b.n	8001cee <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7a5b      	ldrb	r3, [r3, #9]
 8001cec:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001cee:	2309      	movs	r3, #9
 8001cf0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	885b      	ldrh	r3, [r3, #2]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	885b      	ldrh	r3, [r3, #2]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	791b      	ldrb	r3, [r3, #4]
 8001d0a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	795b      	ldrb	r3, [r3, #5]
 8001d10:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	79db      	ldrb	r3, [r3, #7]
 8001d1c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7a1b      	ldrb	r3, [r3, #8]
 8001d22:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001d24:	7dbb      	ldrb	r3, [r7, #22]
 8001d26:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7a9b      	ldrb	r3, [r3, #10]
 8001d2c:	753b      	strb	r3, [r7, #20]
        break;
 8001d2e:	e022      	b.n	8001d76 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b1b      	ldrb	r3, [r3, #12]
 8001d38:	733b      	strb	r3, [r7, #12]
        break;
 8001d3a:	e01c      	b.n	8001d76 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	89db      	ldrh	r3, [r3, #14]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	89db      	ldrh	r3, [r3, #14]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7c1a      	ldrb	r2, [r3, #16]
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <SUBGRF_SetPacketParams+0x138>)
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	7019      	strb	r1, [r3, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7c5b      	ldrb	r3, [r3, #17]
 8001d66:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7c9b      	ldrb	r3, [r3, #18]
 8001d6c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7cdb      	ldrb	r3, [r3, #19]
 8001d72:	747b      	strb	r3, [r7, #17]
        break;
 8001d74:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	208c      	movs	r0, #140	; 0x8c
 8001d82:	f000 f951 	bl	8002028 <SUBGRF_WriteCommand>
 8001d86:	e000      	b.n	8001d8a <SUBGRF_SetPacketParams+0x12a>
        return;
 8001d88:	bf00      	nop
}
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	08005f64 	.word	0x08005f64
 8001d94:	2000009d 	.word	0x2000009d
 8001d98:	2000009e 	.word	0x2000009e

08001d9c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2202      	movs	r2, #2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	208f      	movs	r0, #143	; 0x8f
 8001dbe:	f000 f933 	bl	8002028 <SUBGRF_WriteCommand>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2013      	movs	r0, #19
 8001de0:	f000 f944 	bl	800206c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001de4:	f7ff fe00 	bl	80019e8 <SUBGRF_GetPacketType>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <SUBGRF_GetRxBufferStatus+0x3e>
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <SUBGRF_GetRxBufferStatus+0x54>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001df8:	f240 7002 	movw	r0, #1794	; 0x702
 8001dfc:	f000 f878 	bl	8001ef0 <SUBGRF_ReadRegister>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e002      	b.n	8001e10 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001e0a:	7b3a      	ldrb	r2, [r7, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001e10:	7b7a      	ldrb	r2, [r7, #13]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000009e 	.word	0x2000009e

08001e24 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2203      	movs	r2, #3
 8001e32:	4619      	mov	r1, r3
 8001e34:	2014      	movs	r0, #20
 8001e36:	f000 f919 	bl	800206c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001e3a:	f7ff fdd5 	bl	80019e8 <SUBGRF_GetPacketType>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <SUBGRF_GetPacketStatus+0x30>
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d013      	beq.n	8001e7a <SUBGRF_GetPacketStatus+0x56>
 8001e52:	e02a      	b.n	8001eaa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8001e54:	7b3a      	ldrb	r2, [r7, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	105b      	asrs	r3, r3, #1
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	425b      	negs	r3, r3
 8001e6a:	105b      	asrs	r3, r3, #1
 8001e6c:	b25a      	sxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
            break;
 8001e78:	e020      	b.n	8001ebc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001e7a:	7b3b      	ldrb	r3, [r7, #12]
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	105b      	asrs	r3, r3, #1
 8001e80:	b25a      	sxtb	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	109b      	asrs	r3, r3, #2
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	425b      	negs	r3, r3
 8001e98:	105b      	asrs	r3, r3, #1
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <SUBGRF_GetPacketStatus+0xa0>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	611a      	str	r2, [r3, #16]
            break;
 8001ea8:	e008      	b.n	8001ebc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8001eaa:	2214      	movs	r2, #20
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f003 fb06 	bl	80054c0 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	701a      	strb	r2, [r3, #0]
            break;
 8001eba:	bf00      	nop
    }
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200000a0 	.word	0x200000a0

08001ec8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	80fb      	strh	r3, [r7, #6]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001ed8:	1d7a      	adds	r2, r7, #5
 8001eda:	88f9      	ldrh	r1, [r7, #6]
 8001edc:	2301      	movs	r3, #1
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <SUBGRF_WriteRegister+0x24>)
 8001ee0:	f002 f926 	bl	8004130 <HAL_SUBGHZ_WriteRegisters>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200000cc 	.word	0x200000cc

08001ef0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001efa:	f107 020f 	add.w	r2, r7, #15
 8001efe:	88f9      	ldrh	r1, [r7, #6]
 8001f00:	2301      	movs	r3, #1
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <SUBGRF_ReadRegister+0x24>)
 8001f04:	f002 f973 	bl	80041ee <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200000cc 	.word	0x200000cc

08001f18 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	80fb      	strh	r3, [r7, #6]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f28:	f3ef 8310 	mrs	r3, PRIMASK
 8001f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f32:	b672      	cpsid	i
}
 8001f34:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001f36:	88bb      	ldrh	r3, [r7, #4]
 8001f38:	88f9      	ldrh	r1, [r7, #6]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4806      	ldr	r0, [pc, #24]	; (8001f58 <SUBGRF_WriteRegisters+0x40>)
 8001f3e:	f002 f8f7 	bl	8004130 <HAL_SUBGHZ_WriteRegisters>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f383 8810 	msr	PRIMASK, r3
}
 8001f4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200000cc 	.word	0x200000cc

08001f5c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	80fb      	strh	r3, [r7, #6]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f76:	b672      	cpsid	i
}
 8001f78:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	88f9      	ldrh	r1, [r7, #6]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <SUBGRF_ReadRegisters+0x40>)
 8001f82:	f002 f934 	bl	80041ee <HAL_SUBGHZ_ReadRegisters>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f383 8810 	msr	PRIMASK, r3
}
 8001f90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200000cc 	.word	0x200000cc

08001fa0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fba:	b672      	cpsid	i
}
 8001fbc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001fbe:	79bb      	ldrb	r3, [r7, #6]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	79f9      	ldrb	r1, [r7, #7]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <SUBGRF_WriteBuffer+0x40>)
 8001fc8:	f002 fa25 	bl	8004416 <HAL_SUBGHZ_WriteBuffer>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f383 8810 	msr	PRIMASK, r3
}
 8001fd6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200000cc 	.word	0x200000cc

08001fe4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001ffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffe:	b672      	cpsid	i
}
 8002000:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	b29b      	uxth	r3, r3
 8002006:	79f9      	ldrb	r1, [r7, #7]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <SUBGRF_ReadBuffer+0x40>)
 800200c:	f002 fa56 	bl	80044bc <HAL_SUBGHZ_ReadBuffer>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f383 8810 	msr	PRIMASK, r3
}
 800201a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200000cc 	.word	0x200000cc

08002028 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
 8002034:	4613      	mov	r3, r2
 8002036:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002038:	f3ef 8310 	mrs	r3, PRIMASK
 800203c:	60fb      	str	r3, [r7, #12]
  return(result);
 800203e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002042:	b672      	cpsid	i
}
 8002044:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	79f9      	ldrb	r1, [r7, #7]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4806      	ldr	r0, [pc, #24]	; (8002068 <SUBGRF_WriteCommand+0x40>)
 800204e:	f002 f92f 	bl	80042b0 <HAL_SUBGHZ_ExecSetCmd>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f383 8810 	msr	PRIMASK, r3
}
 800205c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000cc 	.word	0x200000cc

0800206c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
 8002078:	4613      	mov	r3, r2
 800207a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207c:	f3ef 8310 	mrs	r3, PRIMASK
 8002080:	60fb      	str	r3, [r7, #12]
  return(result);
 8002082:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002086:	b672      	cpsid	i
}
 8002088:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	79f9      	ldrb	r1, [r7, #7]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4806      	ldr	r0, [pc, #24]	; (80020ac <SUBGRF_ReadCommand+0x40>)
 8002092:	f002 f96c 	bl	800436e <HAL_SUBGHZ_ExecGetCmd>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f383 8810 	msr	PRIMASK, r3
}
 80020a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200000cc 	.word	0x200000cc

080020b0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d10d      	bne.n	80020e6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d104      	bne.n	80020da <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80020d4:	2004      	movs	r0, #4
 80020d6:	f000 f8d7 	bl	8002288 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d107      	bne.n	80020f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80020e0:	2303      	movs	r3, #3
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e004      	b.n	80020f0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f950 	bl	8001398 <RBI_ConfigRFSwitch>
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800210e:	f7ff f951 	bl	80013b4 <RBI_GetTxConfig>
 8002112:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d016      	beq.n	8002148 <SUBGRF_SetRfTxPower+0x48>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b02      	cmp	r3, #2
 800211e:	dc16      	bgt.n	800214e <SUBGRF_SetRfTxPower+0x4e>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <SUBGRF_SetRfTxPower+0x2e>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d00a      	beq.n	8002142 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800212c:	e00f      	b.n	800214e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	dd02      	ble.n	800213c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002136:	2302      	movs	r3, #2
 8002138:	73fb      	strb	r3, [r7, #15]
            break;
 800213a:	e009      	b.n	8002150 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
            break;
 8002140:	e006      	b.n	8002150 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
            break;
 8002146:	e003      	b.n	8002150 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002148:	2302      	movs	r3, #2
 800214a:	73fb      	strb	r3, [r7, #15]
            break;
 800214c:	e000      	b.n	8002150 <SUBGRF_SetRfTxPower+0x50>
            break;
 800214e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002150:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2202      	movs	r2, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc4f 	bl	80019fc <SUBGRF_SetTxParams>

    return paSelect;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2001      	movs	r0, #1
 8002176:	4798      	blx	r3
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200000a8 	.word	0x200000a8

08002184 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2002      	movs	r0, #2
 8002192:	4798      	blx	r3
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200000a8 	.word	0x200000a8

080021a0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2040      	movs	r0, #64	; 0x40
 80021ae:	4798      	blx	r3
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200000a8 	.word	0x200000a8

080021bc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80021d2:	e00a      	b.n	80021ea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2080      	movs	r0, #128	; 0x80
 80021da:	4798      	blx	r3
            break;
 80021dc:	e005      	b.n	80021ea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e6:	4798      	blx	r3
            break;
 80021e8:	bf00      	nop
    }
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200000a8 	.word	0x200000a8

080021f8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002208:	4798      	blx	r3
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200000a8 	.word	0x200000a8

08002218 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2020      	movs	r0, #32
 8002226:	4798      	blx	r3
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200000a8 	.word	0x200000a8

08002234 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2004      	movs	r0, #4
 8002242:	4798      	blx	r3
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000a8 	.word	0x200000a8

08002250 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2008      	movs	r0, #8
 800225e:	4798      	blx	r3
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200000a8 	.word	0x200000a8

0800226c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2010      	movs	r0, #16
 800227a:	4798      	blx	r3
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200000a8 	.word	0x200000a8

08002288 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002292:	f7ff f89d 	bl	80013d0 <RBI_IsDCDC>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d112      	bne.n	80022c2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800229c:	f640 1023 	movw	r0, #2339	; 0x923
 80022a0:	f7ff fe26 	bl	8001ef0 <SUBGRF_ReadRegister>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	f023 0306 	bic.w	r3, r3, #6
 80022ae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	f640 1023 	movw	r0, #2339	; 0x923
 80022be:	f7ff fe03 	bl	8001ec8 <SUBGRF_WriteRegister>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d6:	2003      	movs	r0, #3
 80022d8:	f000 f95e 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022dc:	f001 fb34 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_Init+0x3c>)
 80022e4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022e6:	200f      	movs	r0, #15
 80022e8:	f000 f810 	bl	800230c <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	e001      	b.n	80022fc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022f8:	f7fe fdaf 	bl	8000e5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_InitTick+0x6c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d024      	beq.n	800236a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002320:	f001 fb12 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_InitTick+0x6c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002330:	fbb3 f3f1 	udiv	r3, r3, r1
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f960 	bl	80025fe <HAL_SYSTICK_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d809      	bhi.n	800235e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234a:	2200      	movs	r2, #0
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	f04f 30ff 	mov.w	r0, #4294967295
 8002352:	f000 f92c 	bl	80025ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_InitTick+0x70>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e007      	b.n	800236e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e004      	b.n	800236e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000014 	.word	0x20000014
 800237c:	20000010 	.word	0x20000010

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_IncTick+0x1c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x20>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_IncTick+0x20>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	20000014 	.word	0x20000014
 80023a0:	20000168 	.word	0x20000168

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <HAL_GetTick+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000168 	.word	0x20000168

080023b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff fff0 	bl	80023a4 <HAL_GetTick>
 80023c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d005      	beq.n	80023de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_Delay+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023de:	bf00      	nop
 80023e0:	f7ff ffe0 	bl	80023a4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d8f7      	bhi.n	80023e0 <HAL_Delay+0x28>
  {
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000014 	.word	0x20000014

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <__NVIC_EnableIRQ+0x34>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff90 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff2d 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff44 	bl	8002448 <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff92 	bl	80024f0 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff61 	bl	800249c <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff37 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa4 	bl	8002554 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e140      	b.n	80028aa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8132 	beq.w	80028a4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d005      	beq.n	8002658 <HAL_GPIO_Init+0x40>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d130      	bne.n	80026ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268e:	2201      	movs	r2, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0201 	and.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d017      	beq.n	80026f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d123      	bne.n	800274a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	6939      	ldr	r1, [r7, #16]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 808c 	beq.w	80028a4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800278c:	4a4e      	ldr	r2, [pc, #312]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	2207      	movs	r2, #7
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027b6:	d00d      	beq.n	80027d4 <HAL_GPIO_Init+0x1bc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_GPIO_Init+0x2b4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d007      	beq.n	80027d0 <HAL_GPIO_Init+0x1b8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <HAL_GPIO_Init+0x2b8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d101      	bne.n	80027cc <HAL_GPIO_Init+0x1b4>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e004      	b.n	80027d6 <HAL_GPIO_Init+0x1be>
 80027cc:	2307      	movs	r3, #7
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0x1be>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_Init+0x1be>
 80027d4:	2300      	movs	r3, #0
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	f002 0203 	and.w	r2, r2, #3
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	4093      	lsls	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027e6:	4938      	ldr	r1, [pc, #224]	; (80028c8 <HAL_GPIO_Init+0x2b0>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002828:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002848:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800289e:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_GPIO_Init+0x2bc>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f aeb7 	bne.w	8002628 <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	48000400 	.word	0x48000400
 80028d0:	48000800 	.word	0x48000800
 80028d4:	58000800 	.word	0x58000800

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002918:	887a      	ldrh	r2, [r7, #2]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	041a      	lsls	r2, r3, #16
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43d9      	mvns	r1, r3
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	400b      	ands	r3, r1
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x18>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	58000400 	.word	0x58000400

08002954 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_PWREx_GetVoltageRange+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	58000400 	.word	0x58000400

0800296c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297c:	d101      	bne.n	8002982 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	58000400 	.word	0x58000400

08002990 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d101      	bne.n	80029e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a34:	d101      	bne.n	8002a3a <LL_RCC_HSE_IsReady+0x18>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_RCC_HSE_IsReady+0x1a>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d101      	bne.n	8002a94 <LL_RCC_HSI_IsReady+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_RCC_HSI_IsReady+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d101      	bne.n	8002ade <LL_RCC_LSE_IsReady+0x18>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_RCC_LSE_IsReady+0x1a>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d101      	bne.n	8002b40 <LL_RCC_LSI_IsReady+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_RCC_LSI_IsReady+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d101      	bne.n	8002b98 <LL_RCC_MSI_IsReady+0x16>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <LL_RCC_MSI_IsReady+0x18>
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d101      	bne.n	8002bb8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d98:	d101      	bne.n	8002d9e <LL_RCC_PLL_IsReady+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_RCC_PLL_IsReady+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0303 	and.w	r3, r3, #3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d101      	bne.n	8002e1a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d101      	bne.n	8002e3e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e5a:	d101      	bne.n	8002e60 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e7c:	d101      	bne.n	8002e82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e38a      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e9e:	f7ff fece 	bl	8002c3e <LL_RCC_GetSysClkSource>
 8002ea2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea4:	f7ff ffa2 	bl	8002dec <LL_RCC_PLL_GetMainSource>
 8002ea8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80c9 	beq.w	800304a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x3e>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d17b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d178      	bne.n	8002fbc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eca:	f7ff fe5a 	bl	8002b82 <LL_RCC_MSI_IsReady>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x54>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e369      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x72>
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	e006      	b.n	8002f0c <HAL_RCC_OscConfig+0x80>
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d222      	bcs.n	8002f56 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd4f 	bl	80039b8 <RCC_SetFlashLatencyFromMSIRange>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e347      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2e:	f043 0308 	orr.w	r3, r3, #8
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fe4e 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>
 8002f54:	e021      	b.n	8002f9a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fe35 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fd14 	bl	80039b8 <RCC_SetFlashLatencyFromMSIRange>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e30c      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f9a:	f000 fcd5 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4ab4      	ldr	r2, [pc, #720]	; (8003274 <HAL_RCC_OscConfig+0x3e8>)
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fa4:	4bb4      	ldr	r3, [pc, #720]	; (8003278 <HAL_RCC_OscConfig+0x3ec>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f9af 	bl	800230c <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d047      	beq.n	8003048 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	e2fb      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02c      	beq.n	800301e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fc4:	f7ff fdc1 	bl	8002b4a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f9ec 	bl	80023a4 <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd0:	f7ff f9e8 	bl	80023a4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2e8      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002fe2:	f7ff fdce 	bl	8002b82 <LL_RCC_MSI_IsReady>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f1      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff6:	f043 0308 	orr.w	r3, r3, #8
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fdea 	bl	8002bf0 <LL_RCC_MSI_SetCalibTrimming>
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800301e:	f7ff fda2 	bl	8002b66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003022:	f7ff f9bf 	bl	80023a4 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800302a:	f7ff f9bb 	bl	80023a4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e2bb      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 800303c:	f7ff fda1 	bl	8002b82 <LL_RCC_MSI_IsReady>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f1      	bne.n	800302a <HAL_RCC_OscConfig+0x19e>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003048:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d05f      	beq.n	8003116 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x1dc>
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d10d      	bne.n	800307e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d10a      	bne.n	800307e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	f7ff fcdb 	bl	8002a22 <LL_RCC_HSE_IsReady>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d050      	beq.n	8003114 <HAL_RCC_OscConfig+0x288>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d14c      	bne.n	8003114 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e29a      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d102      	bne.n	80030a4 <HAL_RCC_OscConfig+0x218>
 800309e:	f7ff fca4 	bl	80029ea <LL_RCC_HSE_Enable>
 80030a2:	e00d      	b.n	80030c0 <HAL_RCC_OscConfig+0x234>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80030ac:	d104      	bne.n	80030b8 <HAL_RCC_OscConfig+0x22c>
 80030ae:	f7ff fc6f 	bl	8002990 <LL_RCC_HSE_EnableTcxo>
 80030b2:	f7ff fc9a 	bl	80029ea <LL_RCC_HSE_Enable>
 80030b6:	e003      	b.n	80030c0 <HAL_RCC_OscConfig+0x234>
 80030b8:	f7ff fca5 	bl	8002a06 <LL_RCC_HSE_Disable>
 80030bc:	f7ff fc76 	bl	80029ac <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f96c 	bl	80023a4 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7ff f968 	bl	80023a4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e268      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80030e2:	f7ff fc9e 	bl	8002a22 <LL_RCC_HSE_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <HAL_RCC_OscConfig+0x244>
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7ff f959 	bl	80023a4 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f6:	f7ff f955 	bl	80023a4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e255      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003108:	f7ff fc8b 	bl	8002a22 <LL_RCC_HSE_IsReady>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f1      	bne.n	80030f6 <HAL_RCC_OscConfig+0x26a>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d04b      	beq.n	80031ba <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x2a8>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d113      	bne.n	8003156 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d110      	bne.n	8003156 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	f7ff fca2 	bl	8002a7c <LL_RCC_HSI_IsReady>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x2be>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e234      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fca5 	bl	8002a9e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	e031      	b.n	80031ba <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d019      	beq.n	8003192 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315e:	f7ff fc71 	bl	8002a44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7ff f91f 	bl	80023a4 <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316a:	f7ff f91b 	bl	80023a4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e21b      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 800317c:	f7ff fc7e 	bl	8002a7c <LL_RCC_HSI_IsReady>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f1      	beq.n	800316a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fc87 	bl	8002a9e <LL_RCC_HSI_SetCalibTrimming>
 8003190:	e013      	b.n	80031ba <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	f7ff fc65 	bl	8002a60 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7ff f905 	bl	80023a4 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7ff f901 	bl	80023a4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e201      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80031b0:	f7ff fc64 	bl	8002a7c <LL_RCC_HSI_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f1      	bne.n	800319e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06e      	beq.n	80032a4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d056      	beq.n	800327c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d031      	beq.n	800324a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1da      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003208:	f7ff fc7e 	bl	8002b08 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800320c:	f7ff f8ca 	bl	80023a4 <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003214:	f7ff f8c6 	bl	80023a4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b11      	cmp	r3, #17
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1c6      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003226:	f7ff fc7f 	bl	8002b28 <LL_RCC_LSI_IsReady>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f1      	bne.n	8003214 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	f023 0210 	bic.w	r2, r3, #16
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	f7ff fc4d 	bl	8002ae8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7ff f8a9 	bl	80023a4 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7ff f8a5 	bl	80023a4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b11      	cmp	r3, #17
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1a5      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003268:	f7ff fc5e 	bl	8002b28 <LL_RCC_LSI_IsReady>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f1      	beq.n	8003256 <HAL_RCC_OscConfig+0x3ca>
 8003272:	e017      	b.n	80032a4 <HAL_RCC_OscConfig+0x418>
 8003274:	20000000 	.word	0x20000000
 8003278:	20000010 	.word	0x20000010
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	f7ff fc44 	bl	8002b08 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7ff f890 	bl	80023a4 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7ff f88c 	bl	80023a4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b11      	cmp	r3, #17
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e18c      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800329a:	f7ff fc45 	bl	8002b28 <LL_RCC_LSI_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80d8 	beq.w	8003462 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80032b2:	f7ff fb5b 	bl	800296c <LL_PWR_IsEnabledBkUpAccess>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d113      	bne.n	80032e4 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032bc:	f7ff fb3c 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c0:	f7ff f870 	bl	80023a4 <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7ff f86c 	bl	80023a4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e16c      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80032da:	f7ff fb47 	bl	800296c <LL_PWR_IsEnabledBkUpAccess>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f1      	beq.n	80032c8 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d07b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b85      	cmp	r3, #133	; 0x85
 80032f2:	d003      	beq.n	80032fc <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d109      	bne.n	8003310 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7ff f848 	bl	80023a4 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7ff f83a 	bl	80023a4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e138      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003342:	f7ff fbc0 	bl	8002ac6 <LL_RCC_LSE_IsReady>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b81      	cmp	r3, #129	; 0x81
 8003352:	d003      	beq.n	800335c <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b85      	cmp	r3, #133	; 0x85
 800335a:	d121      	bne.n	80033a0 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7ff f822 	bl	80023a4 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7ff f814 	bl	80023a4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e112      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ec      	beq.n	8003378 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800339e:	e060      	b.n	8003462 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7ff f800 	bl	80023a4 <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fff2 	bl	80023a4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0f0      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ec      	bne.n	80033bc <HAL_RCC_OscConfig+0x530>
 80033e2:	e03e      	b.n	8003462 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe ffde 	bl	80023a4 <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe ffd0 	bl	80023a4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0ce      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ec      	bne.n	8003400 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fe ffbd 	bl	80023a4 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe ffaf 	bl	80023a4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0ad      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003458:	f7ff fb35 	bl	8002ac6 <LL_RCC_LSE_IsReady>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80a3 	beq.w	80035b2 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d076      	beq.n	8003560 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	2b02      	cmp	r3, #2
 8003478:	d14b      	bne.n	8003512 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	f7ff fc76 	bl	8002d6a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe ff91 	bl	80023a4 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe ff8d 	bl	80023a4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b0a      	cmp	r3, #10
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e08d      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003498:	f7ff fc75 	bl	8002d86 <LL_RCC_PLL_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f1      	bne.n	8003486 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_RCC_OscConfig+0x730>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ba:	0212      	lsls	r2, r2, #8
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034ce:	430a      	orrs	r2, r1
 80034d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d8:	f7ff fc39 	bl	8002d4e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe ff5a 	bl	80023a4 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe ff56 	bl	80023a4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b0a      	cmp	r3, #10
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e056      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003506:	f7ff fc3e 	bl	8002d86 <LL_RCC_PLL_IsReady>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f1      	beq.n	80034f4 <HAL_RCC_OscConfig+0x668>
 8003510:	e04f      	b.n	80035b2 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	f7ff fc2a 	bl	8002d6a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003530:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe ff33 	bl	80023a4 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe ff2f 	bl	80023a4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b0a      	cmp	r3, #10
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e02f      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003554:	f7ff fc17 	bl	8002d86 <LL_RCC_PLL_IsReady>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f1      	bne.n	8003542 <HAL_RCC_OscConfig+0x6b6>
 800355e:	e028      	b.n	80035b2 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e023      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	429a      	cmp	r2, r3
 8003580:	d115      	bne.n	80035ae <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	429a      	cmp	r2, r3
 800358e:	d10e      	bne.n	80035ae <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	429a      	cmp	r2, r3
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	11c1808c 	.word	0x11c1808c

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e10f      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d91b      	bls.n	800361a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b86      	ldr	r3, [pc, #536]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	4984      	ldr	r1, [pc, #528]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f2:	f7fe fed7 	bl	80023a4 <HAL_GetTick>
 80035f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f8:	e008      	b.n	800360c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035fa:	f7fe fed3 	bl	80023a4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0f3      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d1ef      	bne.n	80035fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fb12 	bl	8002c54 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003630:	f7fe feb8 	bl	80023a4 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003638:	f7fe feb4 	bl	80023a4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0d4      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800364a:	f7ff fbda 	bl	8002e02 <LL_RCC_IsActiveFlag_HPRE>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f1      	beq.n	8003638 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fb08 	bl	8002c7a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800366a:	f7fe fe9b 	bl	80023a4 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003672:	f7fe fe97 	bl	80023a4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0b7      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003684:	f7ff fbce 	bl	8002e24 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f1      	beq.n	8003672 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fb01 	bl	8002ca6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036a4:	f7fe fe7e 	bl	80023a4 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036ac:	f7fe fe7a 	bl	80023a4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e09a      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80036be:	f7ff fbc3 	bl	8002e48 <LL_RCC_IsActiveFlag_PPRE1>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f1      	beq.n	80036ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d017      	beq.n	8003704 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff faf6 	bl	8002ccc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036e0:	f7fe fe60 	bl	80023a4 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036e8:	f7fe fe5c 	bl	80023a4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e07c      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80036fa:	f7ff fbb6 	bl	8002e6a <LL_RCC_IsActiveFlag_PPRE2>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f1      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d106      	bne.n	8003726 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003718:	f7ff f983 	bl	8002a22 <LL_RCC_HSE_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11e      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e066      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d106      	bne.n	800373c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800372e:	f7ff fb2a 	bl	8002d86 <LL_RCC_PLL_IsReady>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d113      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e05b      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003744:	f7ff fa1d 	bl	8002b82 <LL_RCC_MSI_IsReady>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e050      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003752:	f7ff f993 	bl	8002a7c <LL_RCC_HSI_IsReady>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e049      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fa57 	bl	8002c18 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376a:	f7fe fe1b 	bl	80023a4 <HAL_GetTick>
 800376e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003770:	e00a      	b.n	8003788 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003772:	f7fe fe17 	bl	80023a4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e035      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003788:	f7ff fa59 	bl	8002c3e <LL_RCC_GetSysClkSource>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ec      	bne.n	8003772 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d21b      	bcs.n	80037de <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 0207 	bic.w	r2, r3, #7
 80037ae:	4913      	ldr	r1, [pc, #76]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fe fdf5 	bl	80023a4 <HAL_GetTick>
 80037ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037be:	f7fe fdf1 	bl	80023a4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e011      	b.n	80037f4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x23c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d1ef      	bne.n	80037be <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037de:	f000 f8b3 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4a06      	ldr	r2, [pc, #24]	; (8003800 <HAL_RCC_ClockConfig+0x240>)
 80037e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe fd8d 	bl	800230c <HAL_InitTick>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	58004000 	.word	0x58004000
 8003800:	20000000 	.word	0x20000000
 8003804:	20000010 	.word	0x20000010

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003816:	f7ff fa12 	bl	8002c3e <LL_RCC_GetSysClkSource>
 800381a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381c:	f7ff fae6 	bl	8002dec <LL_RCC_PLL_GetMainSource>
 8003820:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x2c>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d139      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d136      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003834:	f7ff f9b5 	bl	8002ba2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d115      	bne.n	800386a <HAL_RCC_GetSysClockFreq+0x62>
 800383e:	f7ff f9b0 	bl	8002ba2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003842:	4603      	mov	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	d106      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x4e>
 8003848:	f7ff f9bb 	bl	8002bc2 <LL_RCC_MSI_GetRange>
 800384c:	4603      	mov	r3, r0
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	e005      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x5a>
 8003856:	f7ff f9bf 	bl	8002bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 800385a:	4603      	mov	r3, r0
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4a36      	ldr	r2, [pc, #216]	; (800393c <HAL_RCC_GetSysClockFreq+0x134>)
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	e014      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x8c>
 800386a:	f7ff f99a 	bl	8002ba2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x7a>
 8003874:	f7ff f9a5 	bl	8002bc2 <LL_RCC_MSI_GetRange>
 8003878:	4603      	mov	r3, r0
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	e005      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x86>
 8003882:	f7ff f9a9 	bl	8002bd8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003886:	4603      	mov	r3, r0
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	4a2b      	ldr	r2, [pc, #172]	; (800393c <HAL_RCC_GetSysClockFreq+0x134>)
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038a0:	e012      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d102      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCC_GetSysClockFreq+0x138>)
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e00c      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d109      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038b4:	f7ff f888 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCC_GetSysClockFreq+0x138>)
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e001      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038c6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c8:	f7ff f9b9 	bl	8002c3e <LL_RCC_GetSysClkSource>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d12f      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80038d2:	f7ff fa8b 	bl	8002dec <LL_RCC_PLL_GetMainSource>
 80038d6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0xde>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d003      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xe4>
 80038e4:	e00d      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_RCC_GetSysClockFreq+0x138>)
 80038e8:	60fb      	str	r3, [r7, #12]
        break;
 80038ea:	e00d      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038ec:	f7ff f86c 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_GetSysClockFreq+0x138>)
 80038f8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038fa:	e005      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038fe:	60fb      	str	r3, [r7, #12]
        break;
 8003900:	e002      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	60fb      	str	r3, [r7, #12]
        break;
 8003906:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003908:	f7ff fa4e 	bl	8002da8 <LL_RCC_PLL_GetN>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	fb03 f402 	mul.w	r4, r3, r2
 8003914:	f7ff fa5f 	bl	8002dd6 <LL_RCC_PLL_GetDivider>
 8003918:	4603      	mov	r3, r0
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	3301      	adds	r3, #1
 800391e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003922:	f7ff fa4d 	bl	8002dc0 <LL_RCC_PLL_GetR>
 8003926:	4603      	mov	r3, r0
 8003928:	0f5b      	lsrs	r3, r3, #29
 800392a:	3301      	adds	r3, #1
 800392c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003930:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003932:	697b      	ldr	r3, [r7, #20]
}
 8003934:	4618      	mov	r0, r3
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd90      	pop	{r4, r7, pc}
 800393c:	08005fec 	.word	0x08005fec
 8003940:	00f42400 	.word	0x00f42400
 8003944:	01e84800 	.word	0x01e84800

08003948 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b598      	push	{r3, r4, r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800394c:	f7ff ff5c 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8003950:	4604      	mov	r4, r0
 8003952:	f7ff f9ce 	bl	8002cf2 <LL_RCC_GetAHBPrescaler>
 8003956:	4603      	mov	r3, r0
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x24>)
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd98      	pop	{r3, r4, r7, pc}
 800396c:	08005f8c 	.word	0x08005f8c

08003970 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b598      	push	{r3, r4, r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003974:	f7ff ffe8 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003978:	4604      	mov	r4, r0
 800397a:	f7ff f9d2 	bl	8002d22 <LL_RCC_GetAPB1Prescaler>
 800397e:	4603      	mov	r3, r0
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	4a03      	ldr	r2, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	fa24 f303 	lsr.w	r3, r4, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd98      	pop	{r3, r4, r7, pc}
 8003990:	08005fcc 	.word	0x08005fcc

08003994 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b598      	push	{r3, r4, r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003998:	f7ff ffd6 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 800399c:	4604      	mov	r4, r0
 800399e:	f7ff f9cb 	bl	8002d38 <LL_RCC_GetAPB2Prescaler>
 80039a2:	4603      	mov	r3, r0
 80039a4:	0adb      	lsrs	r3, r3, #11
 80039a6:	4a03      	ldr	r2, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd98      	pop	{r3, r4, r7, pc}
 80039b4:	08005fcc 	.word	0x08005fcc

080039b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80039d0:	f7ff f99a 	bl	8002d08 <LL_RCC_GetAHB3Prescaler>
 80039d4:	4603      	mov	r3, r0
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0c9c      	lsrs	r4, r3, #18
 80039f4:	f7fe ffae 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4619      	mov	r1, r3
 80039fc:	4620      	mov	r0, r4
 80039fe:	f000 f80b 	bl	8003a18 <RCC_SetFlashLatency>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	08005fec 	.word	0x08005fec
 8003a10:	08005f8c 	.word	0x08005f8c
 8003a14:	431bde83 	.word	0x431bde83

08003a18 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <RCC_SetFlashLatency+0xfc>)
 8003a24:	f107 0320 	add.w	r3, r7, #32
 8003a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a2c:	6018      	str	r0, [r3, #0]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003a32:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <RCC_SetFlashLatency+0x100>)
 8003a34:	f107 0318 	add.w	r3, r7, #24
 8003a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a3c:	6018      	str	r0, [r3, #0]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003a42:	4a36      	ldr	r2, [pc, #216]	; (8003b1c <RCC_SetFlashLatency+0x104>)
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a58:	d11d      	bne.n	8003a96 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	e016      	b.n	8003a8e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a68:	4413      	add	r3, r2
 8003a6a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d808      	bhi.n	8003a88 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a7e:	4413      	add	r3, r2
 8003a80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a86:	e023      	b.n	8003ad0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d9e5      	bls.n	8003a60 <RCC_SetFlashLatency+0x48>
 8003a94:	e01c      	b.n	8003ad0 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	e016      	b.n	8003aca <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d808      	bhi.n	8003ac4 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003aba:	4413      	add	r3, r2
 8003abc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ac2:	e005      	b.n	8003ad0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d9e5      	bls.n	8003a9c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <RCC_SetFlashLatency+0x108>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 0207 	bic.w	r2, r3, #7
 8003ad8:	4911      	ldr	r1, [pc, #68]	; (8003b20 <RCC_SetFlashLatency+0x108>)
 8003ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ae0:	f7fe fc60 	bl	80023a4 <HAL_GetTick>
 8003ae4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ae6:	e008      	b.n	8003afa <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ae8:	f7fe fc5c 	bl	80023a4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e007      	b.n	8003b0a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <RCC_SetFlashLatency+0x108>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1ef      	bne.n	8003ae8 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3738      	adds	r7, #56	; 0x38
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	08005f70 	.word	0x08005f70
 8003b18:	08005f78 	.word	0x08005f78
 8003b1c:	08005f80 	.word	0x08005f80
 8003b20:	58004000 	.word	0x58004000

08003b24 <LL_RCC_LSE_IsReady>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d101      	bne.n	8003b3c <LL_RCC_LSE_IsReady+0x18>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <LL_RCC_LSE_IsReady+0x1a>
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_SetUSARTClockSource>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_SetI2SClockSource>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_SetLPUARTClockSource>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <LL_RCC_SetI2CClockSource>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003be2:	43db      	mvns	r3, r3
 8003be4:	401a      	ands	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <LL_RCC_SetLPTIMClockSource>:
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_SetRNGClockSource>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_SetADCClockSource>:
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_SetRTCClockSource>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_GetRTCClockSource>:
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_ForceBackupDomainReset>:
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_ReleaseBackupDomainReset>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d058      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003d2c:	f7fe fe04 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d30:	f7fe fb38 	bl	80023a4 <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003d36:	e009      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d38:	f7fe fb34 	bl	80023a4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
        break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003d4c:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13c      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003d60:	f7ff ffa7 	bl	8003cb2 <LL_RCC_GetRTCClockSource>
 8003d64:	4602      	mov	r2, r0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d00f      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7c:	f7ff ffa5 	bl	8003cca <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	f7ff ffb3 	bl	8003cea <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d014      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fb04 	bl	80023a4 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fe fb00 	bl	80023a4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d902      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	74fb      	strb	r3, [r7, #19]
            break;
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003db8:	f7ff feb4 	bl	8003b24 <LL_RCC_LSE_IsReady>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d1ee      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff5b 	bl	8003c88 <LL_RCC_SetRTCClockSource>
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fea9 	bl	8003b46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe9e 	bl	8003b46 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fec0 	bl	8003ba0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fee6 	bl	8003c02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fedb 	bl	8003c02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fed0 	bl	8003c02 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fea9 	bl	8003bca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fe9e 	bl	8003bca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fe93 	bl	8003bca <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fe5e 	bl	8003b76 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fea5 	bl	8003c34 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fea3 	bl	8003c5e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f20:	d107      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003f32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58000400 	.word	0x58000400

08003f40 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f50:	4904      	ldr	r1, [pc, #16]	; (8003f64 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	58000400 	.word	0x58000400

08003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	58000400 	.word	0x58000400

08003f88 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003f94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	58000400 	.word	0x58000400

08003fa8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb2:	619a      	str	r2, [r3, #24]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	58000400 	.word	0x58000400

08003fc0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d101      	bne.n	8003fd4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	58000400 	.word	0x58000400

08003fe4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d101      	bne.n	8003ff8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	58000400 	.word	0x58000400

08004008 <LL_RCC_RF_DisableReset>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800401c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <LL_RCC_IsRFUnderReset>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403c:	d101      	bne.n	8004042 <LL_RCC_IsRFUnderReset+0x1a>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_RCC_IsRFUnderReset+0x1c>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <LL_EXTI_EnableIT_32_63+0x24>)
 8004056:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800405a:	4905      	ldr	r1, [pc, #20]	; (8004070 <LL_EXTI_EnableIT_32_63+0x24>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	58000800 	.word	0x58000800

08004074 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
    return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	e04b      	b.n	8004122 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	799b      	ldrb	r3, [r3, #6]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fc ff3c 	bl	8000f1c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80040aa:	f7ff ffad 	bl	8004008 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80040ae:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_SUBGHZ_Init+0xb8>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	0cdb      	lsrs	r3, r3, #19
 80040bc:	2264      	movs	r2, #100	; 0x64
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	609a      	str	r2, [r3, #8]
      break;
 80040d4:	e007      	b.n	80040e6 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80040dc:	f7ff ffa4 	bl	8004028 <LL_RCC_IsRFUnderReset>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ee      	bne.n	80040c4 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80040e6:	f7ff ff3f 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80040ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80040ee:	f7ff ffad 	bl	800404c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80040f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80040f6:	f7ff ff23 	bl	8003f40 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80040fa:	f7ff ff55 	bl	8003fa8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f000 faad 	bl	8004668 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	719a      	strb	r2, [r3, #6]

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	817b      	strh	r3, [r7, #10]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	799b      	ldrb	r3, [r3, #6]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d14a      	bne.n	80041e4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	795b      	ldrb	r3, [r3, #5]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004156:	2302      	movs	r3, #2
 8004158:	e045      	b.n	80041e6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2202      	movs	r2, #2
 8004164:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fb4c 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800416c:	f7ff ff0c 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004170:	210d      	movs	r1, #13
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fa98 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004178:	897b      	ldrh	r3, [r7, #10]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	4619      	mov	r1, r3
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa90 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa8a 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004194:	2300      	movs	r3, #0
 8004196:	82bb      	strh	r3, [r7, #20]
 8004198:	e00a      	b.n	80041b0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800419a:	8abb      	ldrh	r3, [r7, #20]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fa7f 	bl	80046a8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80041aa:	8abb      	ldrh	r3, [r7, #20]
 80041ac:	3301      	adds	r3, #1
 80041ae:	82bb      	strh	r3, [r7, #20]
 80041b0:	8aba      	ldrh	r2, [r7, #20]
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3f0      	bcc.n	800419a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80041b8:	f7ff fed6 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fb45 	bl	800484c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
 80041ce:	e001      	b.n	80041d4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	715a      	strb	r2, [r3, #5]

    return status;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	e000      	b.n	80041e6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
  }
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b088      	sub	sp, #32
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	461a      	mov	r2, r3
 80041fa:	460b      	mov	r3, r1
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	4613      	mov	r3, r2
 8004200:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	799b      	ldrb	r3, [r3, #6]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d14a      	bne.n	80042a6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	795b      	ldrb	r3, [r3, #5]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004218:	2302      	movs	r3, #2
 800421a:	e045      	b.n	80042a8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 faee 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004228:	f7ff feae 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800422c:	211d      	movs	r1, #29
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa3a 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004234:	897b      	ldrh	r3, [r7, #10]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	b29b      	uxth	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa32 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa2c 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004250:	2100      	movs	r1, #0
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fa28 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	82fb      	strh	r3, [r7, #22]
 800425c:	e009      	b.n	8004272 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa77 	bl	8004754 <SUBGHZSPI_Receive>
      pData++;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3301      	adds	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	3301      	adds	r3, #1
 8004270:	82fb      	strh	r3, [r7, #22]
 8004272:	8afa      	ldrh	r2, [r7, #22]
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d3f1      	bcc.n	800425e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800427a:	f7ff fe75 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fae4 	bl	800484c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e001      	b.n	8004296 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	715a      	strb	r2, [r3, #5]

    return status;
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	e000      	b.n	80042a8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	460b      	mov	r3, r1
 80042be:	72fb      	strb	r3, [r7, #11]
 80042c0:	4613      	mov	r3, r2
 80042c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	799b      	ldrb	r3, [r3, #6]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d14a      	bne.n	8004364 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	795b      	ldrb	r3, [r3, #5]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e045      	b.n	8004366 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa8f 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	2b84      	cmp	r3, #132	; 0x84
 80042ea:	d002      	beq.n	80042f2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	2b94      	cmp	r3, #148	; 0x94
 80042f0:	d103      	bne.n	80042fa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	711a      	strb	r2, [r3, #4]
 80042f8:	e002      	b.n	8004300 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004300:	f7ff fe42 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	4619      	mov	r1, r3
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f9cd 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	82bb      	strh	r3, [r7, #20]
 8004312:	e00a      	b.n	800432a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004314:	8abb      	ldrh	r3, [r7, #20]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f9c2 	bl	80046a8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004324:	8abb      	ldrh	r3, [r7, #20]
 8004326:	3301      	adds	r3, #1
 8004328:	82bb      	strh	r3, [r7, #20]
 800432a:	8aba      	ldrh	r2, [r7, #20]
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3f0      	bcc.n	8004314 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004332:	f7ff fe19 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004336:	7afb      	ldrb	r3, [r7, #11]
 8004338:	2b84      	cmp	r3, #132	; 0x84
 800433a:	d002      	beq.n	8004342 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa85 	bl	800484c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
 800434e:	e001      	b.n	8004354 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	715a      	strb	r2, [r3, #5]

    return status;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	e000      	b.n	8004366 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	461a      	mov	r2, r3
 800437a:	460b      	mov	r3, r1
 800437c:	72fb      	strb	r3, [r7, #11]
 800437e:	4613      	mov	r3, r2
 8004380:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	799b      	ldrb	r3, [r3, #6]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d13d      	bne.n	800440c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	795b      	ldrb	r3, [r3, #5]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004398:	2302      	movs	r3, #2
 800439a:	e038      	b.n	800440e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa2e 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043a8:	f7ff fdee 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	4619      	mov	r1, r3
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f979 	bl	80046a8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80043b6:	2100      	movs	r1, #0
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f975 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	82fb      	strh	r3, [r7, #22]
 80043c2:	e009      	b.n	80043d8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f9c4 	bl	8004754 <SUBGHZSPI_Receive>
      pData++;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3301      	adds	r3, #1
 80043d0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80043d2:	8afb      	ldrh	r3, [r7, #22]
 80043d4:	3301      	adds	r3, #1
 80043d6:	82fb      	strh	r3, [r7, #22]
 80043d8:	8afa      	ldrh	r2, [r7, #22]
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3f1      	bcc.n	80043c4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043e0:	f7ff fdc2 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fa31 	bl	800484c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e001      	b.n	80043fc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	715a      	strb	r2, [r3, #5]

    return status;
 8004408:	7ffb      	ldrb	r3, [r7, #31]
 800440a:	e000      	b.n	800440e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	461a      	mov	r2, r3
 8004422:	460b      	mov	r3, r1
 8004424:	72fb      	strb	r3, [r7, #11]
 8004426:	4613      	mov	r3, r2
 8004428:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	799b      	ldrb	r3, [r3, #6]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d13e      	bne.n	80044b2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	795b      	ldrb	r3, [r3, #5]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800443c:	2302      	movs	r3, #2
 800443e:	e039      	b.n	80044b4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f9dc 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800444c:	f7ff fd9c 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004450:	210e      	movs	r1, #14
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f928 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004458:	7afb      	ldrb	r3, [r7, #11]
 800445a:	4619      	mov	r1, r3
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f923 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	82bb      	strh	r3, [r7, #20]
 8004466:	e00a      	b.n	800447e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004468:	8abb      	ldrh	r3, [r7, #20]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f918 	bl	80046a8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004478:	8abb      	ldrh	r3, [r7, #20]
 800447a:	3301      	adds	r3, #1
 800447c:	82bb      	strh	r3, [r7, #20]
 800447e:	8aba      	ldrh	r2, [r7, #20]
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	d3f0      	bcc.n	8004468 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004486:	f7ff fd6f 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9de 	bl	800484c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
 800449c:	e001      	b.n	80044a2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	715a      	strb	r2, [r3, #5]

    return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	e000      	b.n	80044b4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	460b      	mov	r3, r1
 80044ca:	72fb      	strb	r3, [r7, #11]
 80044cc:	4613      	mov	r3, r2
 80044ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	799b      	ldrb	r3, [r3, #6]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d141      	bne.n	8004562 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	795b      	ldrb	r3, [r3, #5]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_SUBGHZ_ReadBuffer+0x2e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e03c      	b.n	8004564 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f987 	bl	8004804 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044f6:	f7ff fd47 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80044fa:	211e      	movs	r1, #30
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f8d3 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	4619      	mov	r1, r3
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f8ce 	bl	80046a8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800450c:	2100      	movs	r1, #0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8ca 	bl	80046a8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	82fb      	strh	r3, [r7, #22]
 8004518:	e009      	b.n	800452e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800451a:	69b9      	ldr	r1, [r7, #24]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f919 	bl	8004754 <SUBGHZSPI_Receive>
      pData++;
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3301      	adds	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004528:	8afb      	ldrh	r3, [r7, #22]
 800452a:	3301      	adds	r3, #1
 800452c:	82fb      	strh	r3, [r7, #22]
 800452e:	8afa      	ldrh	r2, [r7, #22]
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3f1      	bcc.n	800451a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004536:	f7ff fd17 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f986 	bl	800484c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e001      	b.n	8004552 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	715a      	strb	r2, [r3, #5]

    return status;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	e000      	b.n	8004564 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8004574:	2300      	movs	r3, #0
 8004576:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8004578:	f107 020c 	add.w	r2, r7, #12
 800457c:	2302      	movs	r3, #2
 800457e:	2112      	movs	r1, #18
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fef4 	bl	800436e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8004586:	7b3b      	ldrb	r3, [r7, #12]
 8004588:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	b21a      	sxth	r2, r3
 8004590:	7b7b      	ldrb	r3, [r7, #13]
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fd fddf 	bl	8002168 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80045aa:	89fb      	ldrh	r3, [r7, #14]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fde4 	bl	8002184 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	089b      	lsrs	r3, r3, #2
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fd fe33 	bl	8002234 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80045ce:	89fb      	ldrh	r3, [r7, #14]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fe38 	bl	8002250 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80045e0:	89fb      	ldrh	r3, [r7, #14]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fd fe3d 	bl	800226c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd fe0a 	bl	8002218 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fd fdc5 	bl	80021a0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00e      	beq.n	8004640 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004622:	89fb      	ldrh	r3, [r7, #14]
 8004624:	0a1b      	lsrs	r3, r3, #8
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800462e:	2101      	movs	r1, #1
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd fdc3 	bl	80021bc <HAL_SUBGHZ_CADStatusCallback>
 8004636:	e003      	b.n	8004640 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd fdbe 	bl	80021bc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004640:	89fb      	ldrh	r3, [r7, #14]
 8004642:	0a5b      	lsrs	r3, r3, #9
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7fd fdd3 	bl	80021f8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004652:	f107 020c 	add.w	r2, r7, #12
 8004656:	2302      	movs	r3, #2
 8004658:	2102      	movs	r1, #2
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fe28 	bl	80042b0 <HAL_SUBGHZ_ExecSetCmd>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 8004676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004684:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 8004688:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800468c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <SUBGHZSPI_Init+0x3c>)
 8004694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	58010000 	.word	0x58010000

080046a8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <SUBGHZSPI_Transmit+0xa0>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	0cdb      	lsrs	r3, r3, #19
 80046c6:	2264      	movs	r2, #100	; 0x64
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	609a      	str	r2, [r3, #8]
      break;
 80046de:	e008      	b.n	80046f2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <SUBGHZSPI_Transmit+0xa4>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d1ed      	bne.n	80046ce <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <SUBGHZSPI_Transmit+0xa8>)
 80046f4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <SUBGHZSPI_Transmit+0xa0>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	0cdb      	lsrs	r3, r3, #19
 800470a:	2264      	movs	r2, #100	; 0x64
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	609a      	str	r2, [r3, #8]
      break;
 8004722:	e008      	b.n	8004736 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b01      	subs	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <SUBGHZSPI_Transmit+0xa4>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d1ed      	bne.n	8004712 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <SUBGHZSPI_Transmit+0xa4>)
 8004738:	68db      	ldr	r3, [r3, #12]

  return status;
 800473a:	7dfb      	ldrb	r3, [r7, #23]
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000000 	.word	0x20000000
 800474c:	58010000 	.word	0x58010000
 8004750:	5801000c 	.word	0x5801000c

08004754 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004762:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <SUBGHZSPI_Receive+0xa4>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	0cdb      	lsrs	r3, r3, #19
 8004770:	2264      	movs	r2, #100	; 0x64
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	609a      	str	r2, [r3, #8]
      break;
 8004788:	e008      	b.n	800479c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b01      	subs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <SUBGHZSPI_Receive+0xa8>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d1ed      	bne.n	8004778 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <SUBGHZSPI_Receive+0xac>)
 800479e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <SUBGHZSPI_Receive+0xa4>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	0cdb      	lsrs	r3, r3, #19
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e008      	b.n	80047e0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <SUBGHZSPI_Receive+0xa8>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d1ed      	bne.n	80047bc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <SUBGHZSPI_Receive+0xa8>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	701a      	strb	r2, [r3, #0]

  return status;
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000000 	.word	0x20000000
 80047fc:	58010000 	.word	0x58010000
 8004800:	5801000c 	.word	0x5801000c

08004804 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	791b      	ldrb	r3, [r3, #4]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d111      	bne.n	8004838 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <SUBGHZ_CheckDeviceReady+0x44>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004824:	f7ff fbb0 	bl	8003f88 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3b01      	subs	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004834:	f7ff fb98 	bl	8003f68 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f807 	bl	800484c <SUBGHZ_WaitOnBusy>
 800483e:	4603      	mov	r3, r0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000000 	.word	0x20000000

0800484c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <SUBGHZ_WaitOnBusy+0x58>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	2264      	movs	r2, #100	; 0x64
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800486e:	f7ff fbb9 	bl	8003fe4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004872:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e009      	b.n	800489a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800488c:	f7ff fb98 	bl	8003fc0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	2b01      	cmp	r3, #1
 8004898:	d0e9      	beq.n	800486e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000000 	.word	0x20000000

080048a8 <LL_RCC_GetUSARTClockSource>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	401a      	ands	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	4313      	orrs	r3, r2
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_GetLPUARTClockSource>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4013      	ands	r3, r2
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e042      	b.n	8004982 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fbd0 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8c3 	bl	8004ab8 <UART_SetConfig>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e022      	b.n	8004982 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb07 	bl	8004f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb8d 	bl	800509a <UART_CheckIdleState>
 8004980:	4603      	mov	r3, r0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	; 0x28
 800498e:	af02      	add	r7, sp, #8
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	f040 8083 	bne.w	8004aac <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Transmit+0x28>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07b      	b.n	8004aae <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Transmit+0x3a>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e074      	b.n	8004aae <HAL_UART_Transmit+0x124>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	; 0x21
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049dc:	f7fd fce2 	bl	80023a4 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d108      	bne.n	8004a0e <HAL_UART_Transmit+0x84>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	e003      	b.n	8004a16 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004a1e:	e02c      	b.n	8004a7a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fb80 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e039      	b.n	8004aae <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	3302      	adds	r3, #2
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	e007      	b.n	8004a68 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3301      	adds	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1cc      	bne.n	8004a20 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2140      	movs	r1, #64	; 0x40
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fb4d 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e006      	b.n	8004aae <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	b5b0      	push	{r4, r5, r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4bab      	ldr	r3, [pc, #684]	; (8004d90 <UART_SetConfig+0x2d8>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	69f9      	ldr	r1, [r7, #28]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4aa0      	ldr	r2, [pc, #640]	; (8004d94 <UART_SetConfig+0x2dc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	f023 010f 	bic.w	r1, r3, #15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a91      	ldr	r2, [pc, #580]	; (8004d98 <UART_SetConfig+0x2e0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d122      	bne.n	8004b9e <UART_SetConfig+0xe6>
 8004b58:	2003      	movs	r0, #3
 8004b5a:	f7ff fea5 	bl	80048a8 <LL_RCC_GetUSARTClockSource>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d817      	bhi.n	8004b98 <UART_SetConfig+0xe0>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <UART_SetConfig+0xb8>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b8d 	.word	0x08004b8d
 8004b78:	08004b87 	.word	0x08004b87
 8004b7c:	08004b93 	.word	0x08004b93
 8004b80:	2301      	movs	r3, #1
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e072      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004b86:	2302      	movs	r3, #2
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e06f      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e06c      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004b92:	2308      	movs	r3, #8
 8004b94:	76fb      	strb	r3, [r7, #27]
 8004b96:	e069      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	e066      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	; (8004d9c <UART_SetConfig+0x2e4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d134      	bne.n	8004c12 <UART_SetConfig+0x15a>
 8004ba8:	200c      	movs	r0, #12
 8004baa:	f7ff fe7d 	bl	80048a8 <LL_RCC_GetUSARTClockSource>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d829      	bhi.n	8004c0c <UART_SetConfig+0x154>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x108>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c0d 	.word	0x08004c0d
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c01 	.word	0x08004c01
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004bfb 	.word	0x08004bfb
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c0d 	.word	0x08004c0d
 8004bf0:	08004c07 	.word	0x08004c07
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	76fb      	strb	r3, [r7, #27]
 8004bf8:	e038      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	76fb      	strb	r3, [r7, #27]
 8004bfe:	e035      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c00:	2304      	movs	r3, #4
 8004c02:	76fb      	strb	r3, [r7, #27]
 8004c04:	e032      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c06:	2308      	movs	r3, #8
 8004c08:	76fb      	strb	r3, [r7, #27]
 8004c0a:	e02f      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	76fb      	strb	r3, [r7, #27]
 8004c10:	e02c      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5f      	ldr	r2, [pc, #380]	; (8004d94 <UART_SetConfig+0x2dc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d125      	bne.n	8004c68 <UART_SetConfig+0x1b0>
 8004c1c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004c20:	f7ff fe54 	bl	80048cc <LL_RCC_GetLPUARTClockSource>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c2a:	d017      	beq.n	8004c5c <UART_SetConfig+0x1a4>
 8004c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c30:	d817      	bhi.n	8004c62 <UART_SetConfig+0x1aa>
 8004c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c36:	d00b      	beq.n	8004c50 <UART_SetConfig+0x198>
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d811      	bhi.n	8004c62 <UART_SetConfig+0x1aa>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <UART_SetConfig+0x192>
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d006      	beq.n	8004c56 <UART_SetConfig+0x19e>
 8004c48:	e00b      	b.n	8004c62 <UART_SetConfig+0x1aa>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	76fb      	strb	r3, [r7, #27]
 8004c4e:	e00d      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c50:	2302      	movs	r3, #2
 8004c52:	76fb      	strb	r3, [r7, #27]
 8004c54:	e00a      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c56:	2304      	movs	r3, #4
 8004c58:	76fb      	strb	r3, [r7, #27]
 8004c5a:	e007      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	76fb      	strb	r3, [r7, #27]
 8004c60:	e004      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c62:	2310      	movs	r3, #16
 8004c64:	76fb      	strb	r3, [r7, #27]
 8004c66:	e001      	b.n	8004c6c <UART_SetConfig+0x1b4>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a48      	ldr	r2, [pc, #288]	; (8004d94 <UART_SetConfig+0x2dc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f040 8098 	bne.w	8004da8 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c78:	7efb      	ldrb	r3, [r7, #27]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d823      	bhi.n	8004cc6 <UART_SetConfig+0x20e>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x1cc>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cb7 	.word	0x08004cb7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cc7 	.word	0x08004cc7
 8004ca0:	08004cc7 	.word	0x08004cc7
 8004ca4:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fe62 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004cac:	6178      	str	r0, [r7, #20]
        break;
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <UART_SetConfig+0x2e8>)
 8004cb2:	617b      	str	r3, [r7, #20]
        break;
 8004cb4:	e00c      	b.n	8004cd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe fda7 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8004cba:	6178      	str	r0, [r7, #20]
        break;
 8004cbc:	e008      	b.n	8004cd0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	617b      	str	r3, [r7, #20]
        break;
 8004cc4:	e004      	b.n	8004cd0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8004cce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8128 	beq.w	8004f28 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <UART_SetConfig+0x2ec>)
 8004cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d305      	bcc.n	8004d08 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d902      	bls.n	8004d0e <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	76bb      	strb	r3, [r7, #26]
 8004d0c:	e10c      	b.n	8004f28 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <UART_SetConfig+0x2ec>)
 8004d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	f7fb fa83 	bl	8000230 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	020b      	lsls	r3, r1, #8
 8004d3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d40:	0202      	lsls	r2, r0, #8
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	6849      	ldr	r1, [r1, #4]
 8004d46:	0849      	lsrs	r1, r1, #1
 8004d48:	4608      	mov	r0, r1
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	1814      	adds	r4, r2, r0
 8004d50:	eb43 0501 	adc.w	r5, r3, r1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	4620      	mov	r0, r4
 8004d60:	4629      	mov	r1, r5
 8004d62:	f7fb fa65 	bl	8000230 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d74:	d308      	bcc.n	8004d88 <UART_SetConfig+0x2d0>
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7c:	d204      	bcs.n	8004d88 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	e0cf      	b.n	8004f28 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	76bb      	strb	r3, [r7, #26]
 8004d8c:	e0cc      	b.n	8004f28 <UART_SetConfig+0x470>
 8004d8e:	bf00      	nop
 8004d90:	cfff69f3 	.word	0xcfff69f3
 8004d94:	40008000 	.word	0x40008000
 8004d98:	40013800 	.word	0x40013800
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	08006034 	.word	0x08006034
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d165      	bne.n	8004e7e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8004db2:	7efb      	ldrb	r3, [r7, #27]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d828      	bhi.n	8004e0a <UART_SetConfig+0x352>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x308>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fdc4 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6178      	str	r0, [r7, #20]
        break;
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fdd2 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8004df0:	6178      	str	r0, [r7, #20]
        break;
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b56      	ldr	r3, [pc, #344]	; (8004f50 <UART_SetConfig+0x498>)
 8004df6:	617b      	str	r3, [r7, #20]
        break;
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe fd05 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8004dfe:	6178      	str	r0, [r7, #20]
        break;
 8004e00:	e008      	b.n	8004e14 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	617b      	str	r3, [r7, #20]
        break;
 8004e08:	e004      	b.n	8004e14 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	76bb      	strb	r3, [r7, #26]
        break;
 8004e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8086 	beq.w	8004f28 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	4a4c      	ldr	r2, [pc, #304]	; (8004f54 <UART_SetConfig+0x49c>)
 8004e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e26:	461a      	mov	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2e:	005a      	lsls	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	441a      	add	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d916      	bls.n	8004e78 <UART_SetConfig+0x3c0>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d212      	bcs.n	8004e78 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f023 030f 	bic.w	r3, r3, #15
 8004e5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	89fa      	ldrh	r2, [r7, #14]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e057      	b.n	8004f28 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	76bb      	strb	r3, [r7, #26]
 8004e7c:	e054      	b.n	8004f28 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e7e:	7efb      	ldrb	r3, [r7, #27]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d828      	bhi.n	8004ed6 <UART_SetConfig+0x41e>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x3d4>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ed7 	.word	0x08004ed7
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ed7 	.word	0x08004ed7
 8004ea4:	08004ed7 	.word	0x08004ed7
 8004ea8:	08004ed7 	.word	0x08004ed7
 8004eac:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7fe fd5e 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	6178      	str	r0, [r7, #20]
        break;
 8004eb6:	e013      	b.n	8004ee0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fe fd6c 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	6178      	str	r0, [r7, #20]
        break;
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <UART_SetConfig+0x498>)
 8004ec2:	617b      	str	r3, [r7, #20]
        break;
 8004ec4:	e00c      	b.n	8004ee0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fe fc9f 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8004eca:	6178      	str	r0, [r7, #20]
        break;
 8004ecc:	e008      	b.n	8004ee0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed2:	617b      	str	r3, [r7, #20]
        break;
 8004ed4:	e004      	b.n	8004ee0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ede:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d020      	beq.n	8004f28 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <UART_SetConfig+0x49c>)
 8004eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	441a      	add	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d908      	bls.n	8004f24 <UART_SetConfig+0x46c>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f18:	d204      	bcs.n	8004f24 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	e001      	b.n	8004f28 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f44:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	08006034 	.word	0x08006034

08004f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005056:	d10a      	bne.n	800506e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af02      	add	r7, sp, #8
 80050a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050aa:	f7fd f97b 	bl	80023a4 <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d10e      	bne.n	80050dc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f82f 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e025      	b.n	8005128 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d10e      	bne.n	8005108 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f819 	bl	8005130 <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e00f      	b.n	8005128 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b09c      	sub	sp, #112	; 0x70
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005140:	e0a9      	b.n	8005296 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	f000 80a5 	beq.w	8005296 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fd f92a 	bl	80023a4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <UART_WaitOnFlagUntilTimeout+0x32>
 800515c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515e:	2b00      	cmp	r3, #0
 8005160:	d140      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005182:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005186:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800518e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	663b      	str	r3, [r7, #96]	; 0x60
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80051b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e069      	b.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d051      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d149      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800520a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
 800522c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	613b      	str	r3, [r7, #16]
   return(result);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	66bb      	str	r3, [r7, #104]	; 0x68
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800525e:	623a      	str	r2, [r7, #32]
 8005260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	6a3a      	ldr	r2, [r7, #32]
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	61bb      	str	r3, [r7, #24]
   return(result);
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e010      	b.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f43f af46 	beq.w	8005142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3770      	adds	r7, #112	; 0x70
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e027      	b.n	8005326 <HAL_UARTEx_DisableFifoMode+0x66>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2224      	movs	r2, #36	; 0x24
 80052e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e02d      	b.n	80053a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f84f 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e02d      	b.n	8005420 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f811 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005448:	e031      	b.n	80054ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800544a:	2308      	movs	r3, #8
 800544c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800544e:	2308      	movs	r3, #8
 8005450:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0e5b      	lsrs	r3, r3, #25
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	0f5b      	lsrs	r3, r3, #29
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	7b3a      	ldrb	r2, [r7, #12]
 8005476:	4910      	ldr	r1, [pc, #64]	; (80054b8 <UARTEx_SetNbDataToProcess+0x90>)
 8005478:	5c8a      	ldrb	r2, [r1, r2]
 800547a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800547e:	7b3a      	ldrb	r2, [r7, #12]
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <UARTEx_SetNbDataToProcess+0x94>)
 8005482:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005484:	fb93 f3f2 	sdiv	r3, r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	7b7a      	ldrb	r2, [r7, #13]
 8005494:	4908      	ldr	r1, [pc, #32]	; (80054b8 <UARTEx_SetNbDataToProcess+0x90>)
 8005496:	5c8a      	ldrb	r2, [r1, r2]
 8005498:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800549c:	7b7a      	ldrb	r2, [r7, #13]
 800549e:	4907      	ldr	r1, [pc, #28]	; (80054bc <UARTEx_SetNbDataToProcess+0x94>)
 80054a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	0800604c 	.word	0x0800604c
 80054bc:	08006054 	.word	0x08006054

080054c0 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
 80054cc:	4613      	mov	r3, r2
 80054ce:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80054d4:	e004      	b.n	80054e0 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80054e0:	883b      	ldrh	r3, [r7, #0]
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	803a      	strh	r2, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f5      	bne.n	80054d6 <UTIL_MEM_set_8+0x16>
  }
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
	...

080054f8 <__errno>:
 80054f8:	4b01      	ldr	r3, [pc, #4]	; (8005500 <__errno+0x8>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000018 	.word	0x20000018

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d0d      	ldr	r5, [pc, #52]	; (800553c <__libc_init_array+0x38>)
 8005508:	4c0d      	ldr	r4, [pc, #52]	; (8005540 <__libc_init_array+0x3c>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	2600      	movs	r6, #0
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	4d0b      	ldr	r5, [pc, #44]	; (8005544 <__libc_init_array+0x40>)
 8005516:	4c0c      	ldr	r4, [pc, #48]	; (8005548 <__libc_init_array+0x44>)
 8005518:	f000 fc5e 	bl	8005dd8 <_init>
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	2600      	movs	r6, #0
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	08006098 	.word	0x08006098
 8005540:	08006098 	.word	0x08006098
 8005544:	08006098 	.word	0x08006098
 8005548:	0800609c 	.word	0x0800609c

0800554c <memset>:
 800554c:	4402      	add	r2, r0
 800554e:	4603      	mov	r3, r0
 8005550:	4293      	cmp	r3, r2
 8005552:	d100      	bne.n	8005556 <memset+0xa>
 8005554:	4770      	bx	lr
 8005556:	f803 1b01 	strb.w	r1, [r3], #1
 800555a:	e7f9      	b.n	8005550 <memset+0x4>

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	b500      	push	{lr}
 8005560:	b09c      	sub	sp, #112	; 0x70
 8005562:	ab1d      	add	r3, sp, #116	; 0x74
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800556c:	4809      	ldr	r0, [pc, #36]	; (8005594 <siprintf+0x38>)
 800556e:	9107      	str	r1, [sp, #28]
 8005570:	9104      	str	r1, [sp, #16]
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	a902      	add	r1, sp, #8
 8005580:	f000 f87a 	bl	8005678 <_svfiprintf_r>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000018 	.word	0x20000018
 8005598:	ffff0208 	.word	0xffff0208

0800559c <strncmp>:
 800559c:	b510      	push	{r4, lr}
 800559e:	b16a      	cbz	r2, 80055bc <strncmp+0x20>
 80055a0:	3901      	subs	r1, #1
 80055a2:	1884      	adds	r4, r0, r2
 80055a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80055a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <strncmp+0x1c>
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d001      	beq.n	80055b8 <strncmp+0x1c>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f5      	bne.n	80055a4 <strncmp+0x8>
 80055b8:	1a98      	subs	r0, r3, r2
 80055ba:	bd10      	pop	{r4, pc}
 80055bc:	4610      	mov	r0, r2
 80055be:	e7fc      	b.n	80055ba <strncmp+0x1e>

080055c0 <__ssputs_r>:
 80055c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	688e      	ldr	r6, [r1, #8]
 80055c6:	429e      	cmp	r6, r3
 80055c8:	4682      	mov	sl, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	4690      	mov	r8, r2
 80055ce:	461f      	mov	r7, r3
 80055d0:	d838      	bhi.n	8005644 <__ssputs_r+0x84>
 80055d2:	898a      	ldrh	r2, [r1, #12]
 80055d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055d8:	d032      	beq.n	8005640 <__ssputs_r+0x80>
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	6909      	ldr	r1, [r1, #16]
 80055de:	eba5 0901 	sub.w	r9, r5, r1
 80055e2:	6965      	ldr	r5, [r4, #20]
 80055e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ec:	3301      	adds	r3, #1
 80055ee:	444b      	add	r3, r9
 80055f0:	106d      	asrs	r5, r5, #1
 80055f2:	429d      	cmp	r5, r3
 80055f4:	bf38      	it	cc
 80055f6:	461d      	movcc	r5, r3
 80055f8:	0553      	lsls	r3, r2, #21
 80055fa:	d531      	bpl.n	8005660 <__ssputs_r+0xa0>
 80055fc:	4629      	mov	r1, r5
 80055fe:	f000 fb45 	bl	8005c8c <_malloc_r>
 8005602:	4606      	mov	r6, r0
 8005604:	b950      	cbnz	r0, 800561c <__ssputs_r+0x5c>
 8005606:	230c      	movs	r3, #12
 8005608:	f8ca 3000 	str.w	r3, [sl]
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561c:	6921      	ldr	r1, [r4, #16]
 800561e:	464a      	mov	r2, r9
 8005620:	f000 fabe 	bl	8005ba0 <memcpy>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	6126      	str	r6, [r4, #16]
 8005632:	6165      	str	r5, [r4, #20]
 8005634:	444e      	add	r6, r9
 8005636:	eba5 0509 	sub.w	r5, r5, r9
 800563a:	6026      	str	r6, [r4, #0]
 800563c:	60a5      	str	r5, [r4, #8]
 800563e:	463e      	mov	r6, r7
 8005640:	42be      	cmp	r6, r7
 8005642:	d900      	bls.n	8005646 <__ssputs_r+0x86>
 8005644:	463e      	mov	r6, r7
 8005646:	4632      	mov	r2, r6
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	4641      	mov	r1, r8
 800564c:	f000 fab6 	bl	8005bbc <memmove>
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	1b9b      	subs	r3, r3, r6
 8005656:	4432      	add	r2, r6
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6022      	str	r2, [r4, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	e7db      	b.n	8005618 <__ssputs_r+0x58>
 8005660:	462a      	mov	r2, r5
 8005662:	f000 fb6d 	bl	8005d40 <_realloc_r>
 8005666:	4606      	mov	r6, r0
 8005668:	2800      	cmp	r0, #0
 800566a:	d1e1      	bne.n	8005630 <__ssputs_r+0x70>
 800566c:	6921      	ldr	r1, [r4, #16]
 800566e:	4650      	mov	r0, sl
 8005670:	f000 fabe 	bl	8005bf0 <_free_r>
 8005674:	e7c7      	b.n	8005606 <__ssputs_r+0x46>
	...

08005678 <_svfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4698      	mov	r8, r3
 800567e:	898b      	ldrh	r3, [r1, #12]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	b09d      	sub	sp, #116	; 0x74
 8005684:	4607      	mov	r7, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4614      	mov	r4, r2
 800568a:	d50e      	bpl.n	80056aa <_svfiprintf_r+0x32>
 800568c:	690b      	ldr	r3, [r1, #16]
 800568e:	b963      	cbnz	r3, 80056aa <_svfiprintf_r+0x32>
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	f000 fafb 	bl	8005c8c <_malloc_r>
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6128      	str	r0, [r5, #16]
 800569a:	b920      	cbnz	r0, 80056a6 <_svfiprintf_r+0x2e>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e0d1      	b.n	800584a <_svfiprintf_r+0x1d2>
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	616b      	str	r3, [r5, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	2320      	movs	r3, #32
 80056b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b8:	2330      	movs	r3, #48	; 0x30
 80056ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005864 <_svfiprintf_r+0x1ec>
 80056be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c2:	f04f 0901 	mov.w	r9, #1
 80056c6:	4623      	mov	r3, r4
 80056c8:	469a      	mov	sl, r3
 80056ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ce:	b10a      	cbz	r2, 80056d4 <_svfiprintf_r+0x5c>
 80056d0:	2a25      	cmp	r2, #37	; 0x25
 80056d2:	d1f9      	bne.n	80056c8 <_svfiprintf_r+0x50>
 80056d4:	ebba 0b04 	subs.w	fp, sl, r4
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x7a>
 80056da:	465b      	mov	r3, fp
 80056dc:	4622      	mov	r2, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ff6d 	bl	80055c0 <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80aa 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ee:	445a      	add	r2, fp
 80056f0:	9209      	str	r2, [sp, #36]	; 0x24
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a2 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005706:	f10a 0a01 	add.w	sl, sl, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005712:	931a      	str	r3, [sp, #104]	; 0x68
 8005714:	4654      	mov	r4, sl
 8005716:	2205      	movs	r2, #5
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4851      	ldr	r0, [pc, #324]	; (8005864 <_svfiprintf_r+0x1ec>)
 800571e:	f7fa fd37 	bl	8000190 <memchr>
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xe6>
 8005726:	06d0      	lsls	r0, r2, #27
 8005728:	bf44      	itt	mi
 800572a:	2320      	movmi	r3, #32
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005730:	0711      	lsls	r1, r2, #28
 8005732:	bf44      	itt	mi
 8005734:	232b      	movmi	r3, #43	; 0x2b
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573a:	f89a 3000 	ldrb.w	r3, [sl]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d015      	beq.n	800576e <_svfiprintf_r+0xf6>
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	4654      	mov	r4, sl
 8005746:	2000      	movs	r0, #0
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4621      	mov	r1, r4
 800574e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005752:	3b30      	subs	r3, #48	; 0x30
 8005754:	2b09      	cmp	r3, #9
 8005756:	d94e      	bls.n	80057f6 <_svfiprintf_r+0x17e>
 8005758:	b1b0      	cbz	r0, 8005788 <_svfiprintf_r+0x110>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e014      	b.n	8005788 <_svfiprintf_r+0x110>
 800575e:	eba0 0308 	sub.w	r3, r0, r8
 8005762:	fa09 f303 	lsl.w	r3, r9, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	46a2      	mov	sl, r4
 800576c:	e7d2      	b.n	8005714 <_svfiprintf_r+0x9c>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbb      	ittet	lt
 800577a:	425b      	neglt	r3, r3
 800577c:	f042 0202 	orrlt.w	r2, r2, #2
 8005780:	9307      	strge	r3, [sp, #28]
 8005782:	9307      	strlt	r3, [sp, #28]
 8005784:	bfb8      	it	lt
 8005786:	9204      	strlt	r2, [sp, #16]
 8005788:	7823      	ldrb	r3, [r4, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d10c      	bne.n	80057a8 <_svfiprintf_r+0x130>
 800578e:	7863      	ldrb	r3, [r4, #1]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	d135      	bne.n	8005800 <_svfiprintf_r+0x188>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb8      	it	lt
 80057a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a4:	3402      	adds	r4, #2
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005874 <_svfiprintf_r+0x1fc>
 80057ac:	7821      	ldrb	r1, [r4, #0]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4650      	mov	r0, sl
 80057b2:	f7fa fced 	bl	8000190 <memchr>
 80057b6:	b140      	cbz	r0, 80057ca <_svfiprintf_r+0x152>
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	eba0 000a 	sub.w	r0, r0, sl
 80057be:	fa03 f000 	lsl.w	r0, r3, r0
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	4303      	orrs	r3, r0
 80057c6:	3401      	adds	r4, #1
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ce:	4826      	ldr	r0, [pc, #152]	; (8005868 <_svfiprintf_r+0x1f0>)
 80057d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d4:	2206      	movs	r2, #6
 80057d6:	f7fa fcdb 	bl	8000190 <memchr>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d038      	beq.n	8005850 <_svfiprintf_r+0x1d8>
 80057de:	4b23      	ldr	r3, [pc, #140]	; (800586c <_svfiprintf_r+0x1f4>)
 80057e0:	bb1b      	cbnz	r3, 800582a <_svfiprintf_r+0x1b2>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	3307      	adds	r3, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	3308      	adds	r3, #8
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	4433      	add	r3, r6
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	e767      	b.n	80056c6 <_svfiprintf_r+0x4e>
 80057f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fa:	460c      	mov	r4, r1
 80057fc:	2001      	movs	r0, #1
 80057fe:	e7a5      	b.n	800574c <_svfiprintf_r+0xd4>
 8005800:	2300      	movs	r3, #0
 8005802:	3401      	adds	r4, #1
 8005804:	9305      	str	r3, [sp, #20]
 8005806:	4619      	mov	r1, r3
 8005808:	f04f 0c0a 	mov.w	ip, #10
 800580c:	4620      	mov	r0, r4
 800580e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005812:	3a30      	subs	r2, #48	; 0x30
 8005814:	2a09      	cmp	r2, #9
 8005816:	d903      	bls.n	8005820 <_svfiprintf_r+0x1a8>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0c5      	beq.n	80057a8 <_svfiprintf_r+0x130>
 800581c:	9105      	str	r1, [sp, #20]
 800581e:	e7c3      	b.n	80057a8 <_svfiprintf_r+0x130>
 8005820:	fb0c 2101 	mla	r1, ip, r1, r2
 8005824:	4604      	mov	r4, r0
 8005826:	2301      	movs	r3, #1
 8005828:	e7f0      	b.n	800580c <_svfiprintf_r+0x194>
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462a      	mov	r2, r5
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <_svfiprintf_r+0x1f8>)
 8005832:	a904      	add	r1, sp, #16
 8005834:	4638      	mov	r0, r7
 8005836:	f3af 8000 	nop.w
 800583a:	1c42      	adds	r2, r0, #1
 800583c:	4606      	mov	r6, r0
 800583e:	d1d6      	bne.n	80057ee <_svfiprintf_r+0x176>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	065b      	lsls	r3, r3, #25
 8005844:	f53f af2c 	bmi.w	80056a0 <_svfiprintf_r+0x28>
 8005848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584a:	b01d      	add	sp, #116	; 0x74
 800584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005850:	ab03      	add	r3, sp, #12
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462a      	mov	r2, r5
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <_svfiprintf_r+0x1f8>)
 8005858:	a904      	add	r1, sp, #16
 800585a:	4638      	mov	r0, r7
 800585c:	f000 f87a 	bl	8005954 <_printf_i>
 8005860:	e7eb      	b.n	800583a <_svfiprintf_r+0x1c2>
 8005862:	bf00      	nop
 8005864:	0800605c 	.word	0x0800605c
 8005868:	08006066 	.word	0x08006066
 800586c:	00000000 	.word	0x00000000
 8005870:	080055c1 	.word	0x080055c1
 8005874:	08006062 	.word	0x08006062

08005878 <_printf_common>:
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	4616      	mov	r6, r2
 800587e:	4699      	mov	r9, r3
 8005880:	688a      	ldr	r2, [r1, #8]
 8005882:	690b      	ldr	r3, [r1, #16]
 8005884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005888:	4293      	cmp	r3, r2
 800588a:	bfb8      	it	lt
 800588c:	4613      	movlt	r3, r2
 800588e:	6033      	str	r3, [r6, #0]
 8005890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005894:	4607      	mov	r7, r0
 8005896:	460c      	mov	r4, r1
 8005898:	b10a      	cbz	r2, 800589e <_printf_common+0x26>
 800589a:	3301      	adds	r3, #1
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	0699      	lsls	r1, r3, #26
 80058a2:	bf42      	ittt	mi
 80058a4:	6833      	ldrmi	r3, [r6, #0]
 80058a6:	3302      	addmi	r3, #2
 80058a8:	6033      	strmi	r3, [r6, #0]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d106      	bne.n	80058c0 <_printf_common+0x48>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	6832      	ldr	r2, [r6, #0]
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	42ab      	cmp	r3, r5
 80058be:	dc26      	bgt.n	800590e <_printf_common+0x96>
 80058c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058c4:	1e13      	subs	r3, r2, #0
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	0692      	lsls	r2, r2, #26
 80058ce:	d42b      	bmi.n	8005928 <_printf_common+0xb0>
 80058d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d01e      	beq.n	800591c <_printf_common+0xa4>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	68e5      	ldr	r5, [r4, #12]
 80058e2:	6832      	ldr	r2, [r6, #0]
 80058e4:	f003 0306 	and.w	r3, r3, #6
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	bf08      	it	eq
 80058ec:	1aad      	subeq	r5, r5, r2
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	bf0c      	ite	eq
 80058f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f8:	2500      	movne	r5, #0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bfc4      	itt	gt
 80058fe:	1a9b      	subgt	r3, r3, r2
 8005900:	18ed      	addgt	r5, r5, r3
 8005902:	2600      	movs	r6, #0
 8005904:	341a      	adds	r4, #26
 8005906:	42b5      	cmp	r5, r6
 8005908:	d11a      	bne.n	8005940 <_printf_common+0xc8>
 800590a:	2000      	movs	r0, #0
 800590c:	e008      	b.n	8005920 <_printf_common+0xa8>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4649      	mov	r1, r9
 8005914:	4638      	mov	r0, r7
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d103      	bne.n	8005924 <_printf_common+0xac>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	3501      	adds	r5, #1
 8005926:	e7c6      	b.n	80058b6 <_printf_common+0x3e>
 8005928:	18e1      	adds	r1, r4, r3
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	2030      	movs	r0, #48	; 0x30
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005932:	4422      	add	r2, r4
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800593c:	3302      	adds	r3, #2
 800593e:	e7c7      	b.n	80058d0 <_printf_common+0x58>
 8005940:	2301      	movs	r3, #1
 8005942:	4622      	mov	r2, r4
 8005944:	4649      	mov	r1, r9
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	3001      	adds	r0, #1
 800594c:	d0e6      	beq.n	800591c <_printf_common+0xa4>
 800594e:	3601      	adds	r6, #1
 8005950:	e7d9      	b.n	8005906 <_printf_common+0x8e>
	...

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	460c      	mov	r4, r1
 800595a:	4691      	mov	r9, r2
 800595c:	7e27      	ldrb	r7, [r4, #24]
 800595e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005960:	2f78      	cmp	r7, #120	; 0x78
 8005962:	4680      	mov	r8, r0
 8005964:	469a      	mov	sl, r3
 8005966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	; 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d8 	beq.w	8005b26 <_printf_i+0x1d2>
 8005976:	2f58      	cmp	r7, #88	; 0x58
 8005978:	f000 80a3 	beq.w	8005ac2 <_printf_i+0x16e>
 800597c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a001      	add	r0, pc, #4	; (adr r0, 8005994 <_printf_i+0x40>)
 8005990:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b0d 	.word	0x08005b0d
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005aef 	.word	0x08005aef
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b2f 	.word	0x08005b2f
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005af7 	.word	0x08005af7
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	600a      	str	r2, [r1, #0]
 80059f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0a3      	b.n	8005b48 <_printf_i+0x1f4>
 8005a00:	6825      	ldr	r5, [r4, #0]
 8005a02:	6808      	ldr	r0, [r1, #0]
 8005a04:	062e      	lsls	r6, r5, #24
 8005a06:	f100 0304 	add.w	r3, r0, #4
 8005a0a:	d50a      	bpl.n	8005a22 <_printf_i+0xce>
 8005a0c:	6805      	ldr	r5, [r0, #0]
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	da03      	bge.n	8005a1c <_printf_i+0xc8>
 8005a14:	232d      	movs	r3, #45	; 0x2d
 8005a16:	426d      	negs	r5, r5
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	485e      	ldr	r0, [pc, #376]	; (8005b98 <_printf_i+0x244>)
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e019      	b.n	8005a56 <_printf_i+0x102>
 8005a22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a26:	6805      	ldr	r5, [r0, #0]
 8005a28:	600b      	str	r3, [r1, #0]
 8005a2a:	bf18      	it	ne
 8005a2c:	b22d      	sxthne	r5, r5
 8005a2e:	e7ef      	b.n	8005a10 <_printf_i+0xbc>
 8005a30:	680b      	ldr	r3, [r1, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	1d18      	adds	r0, r3, #4
 8005a36:	6008      	str	r0, [r1, #0]
 8005a38:	0628      	lsls	r0, r5, #24
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0xec>
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <_printf_i+0xf2>
 8005a40:	0669      	lsls	r1, r5, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0xe8>
 8005a44:	881d      	ldrh	r5, [r3, #0]
 8005a46:	4854      	ldr	r0, [pc, #336]	; (8005b98 <_printf_i+0x244>)
 8005a48:	2f6f      	cmp	r7, #111	; 0x6f
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2308      	moveq	r3, #8
 8005a4e:	230a      	movne	r3, #10
 8005a50:	2100      	movs	r1, #0
 8005a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a56:	6866      	ldr	r6, [r4, #4]
 8005a58:	60a6      	str	r6, [r4, #8]
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	bfa2      	ittt	ge
 8005a5e:	6821      	ldrge	r1, [r4, #0]
 8005a60:	f021 0104 	bicge.w	r1, r1, #4
 8005a64:	6021      	strge	r1, [r4, #0]
 8005a66:	b90d      	cbnz	r5, 8005a6c <_printf_i+0x118>
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	d04d      	beq.n	8005b08 <_printf_i+0x1b4>
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a72:	fb03 5711 	mls	r7, r3, r1, r5
 8005a76:	5dc7      	ldrb	r7, [r0, r7]
 8005a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a7c:	462f      	mov	r7, r5
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	460d      	mov	r5, r1
 8005a82:	d9f4      	bls.n	8005a6e <_printf_i+0x11a>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10b      	bne.n	8005aa0 <_printf_i+0x14c>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07df      	lsls	r7, r3, #31
 8005a8c:	d508      	bpl.n	8005aa0 <_printf_i+0x14c>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	bfde      	ittt	le
 8005a96:	2330      	movle	r3, #48	; 0x30
 8005a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aa0:	1b92      	subs	r2, r2, r6
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fee2 	bl	8005878 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d14c      	bne.n	8005b52 <_printf_i+0x1fe>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	4835      	ldr	r0, [pc, #212]	; (8005b98 <_printf_i+0x244>)
 8005ac4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	680e      	ldr	r6, [r1, #0]
 8005acc:	061f      	lsls	r7, r3, #24
 8005ace:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ad2:	600e      	str	r6, [r1, #0]
 8005ad4:	d514      	bpl.n	8005b00 <_printf_i+0x1ac>
 8005ad6:	07d9      	lsls	r1, r3, #31
 8005ad8:	bf44      	itt	mi
 8005ada:	f043 0320 	orrmi.w	r3, r3, #32
 8005ade:	6023      	strmi	r3, [r4, #0]
 8005ae0:	b91d      	cbnz	r5, 8005aea <_printf_i+0x196>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f023 0320 	bic.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2310      	movs	r3, #16
 8005aec:	e7b0      	b.n	8005a50 <_printf_i+0xfc>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f043 0320 	orr.w	r3, r3, #32
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	2378      	movs	r3, #120	; 0x78
 8005af8:	4828      	ldr	r0, [pc, #160]	; (8005b9c <_printf_i+0x248>)
 8005afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afe:	e7e3      	b.n	8005ac8 <_printf_i+0x174>
 8005b00:	065e      	lsls	r6, r3, #25
 8005b02:	bf48      	it	mi
 8005b04:	b2ad      	uxthmi	r5, r5
 8005b06:	e7e6      	b.n	8005ad6 <_printf_i+0x182>
 8005b08:	4616      	mov	r6, r2
 8005b0a:	e7bb      	b.n	8005a84 <_printf_i+0x130>
 8005b0c:	680b      	ldr	r3, [r1, #0]
 8005b0e:	6826      	ldr	r6, [r4, #0]
 8005b10:	6960      	ldr	r0, [r4, #20]
 8005b12:	1d1d      	adds	r5, r3, #4
 8005b14:	600d      	str	r5, [r1, #0]
 8005b16:	0635      	lsls	r5, r6, #24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0x1cc>
 8005b1c:	6018      	str	r0, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0x1d2>
 8005b20:	0671      	lsls	r1, r6, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0x1c8>
 8005b24:	8018      	strh	r0, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	4616      	mov	r6, r2
 8005b2c:	e7ba      	b.n	8005aa4 <_printf_i+0x150>
 8005b2e:	680b      	ldr	r3, [r1, #0]
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	600a      	str	r2, [r1, #0]
 8005b34:	681e      	ldr	r6, [r3, #0]
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7fa fb28 	bl	8000190 <memchr>
 8005b40:	b108      	cbz	r0, 8005b46 <_printf_i+0x1f2>
 8005b42:	1b80      	subs	r0, r0, r6
 8005b44:	6060      	str	r0, [r4, #4]
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b50:	e7a8      	b.n	8005aa4 <_printf_i+0x150>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	4632      	mov	r2, r6
 8005b56:	4649      	mov	r1, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	47d0      	blx	sl
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d0ab      	beq.n	8005ab8 <_printf_i+0x164>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	d413      	bmi.n	8005b8e <_printf_i+0x23a>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e7a4      	b.n	8005abc <_printf_i+0x168>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4632      	mov	r2, r6
 8005b76:	4649      	mov	r1, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	47d0      	blx	sl
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d09b      	beq.n	8005ab8 <_printf_i+0x164>
 8005b80:	3501      	adds	r5, #1
 8005b82:	68e3      	ldr	r3, [r4, #12]
 8005b84:	9903      	ldr	r1, [sp, #12]
 8005b86:	1a5b      	subs	r3, r3, r1
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	dcf2      	bgt.n	8005b72 <_printf_i+0x21e>
 8005b8c:	e7eb      	b.n	8005b66 <_printf_i+0x212>
 8005b8e:	2500      	movs	r5, #0
 8005b90:	f104 0619 	add.w	r6, r4, #25
 8005b94:	e7f5      	b.n	8005b82 <_printf_i+0x22e>
 8005b96:	bf00      	nop
 8005b98:	0800606d 	.word	0x0800606d
 8005b9c:	0800607e 	.word	0x0800607e

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <memmove>:
 8005bbc:	4288      	cmp	r0, r1
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	eb01 0402 	add.w	r4, r1, r2
 8005bc4:	d902      	bls.n	8005bcc <memmove+0x10>
 8005bc6:	4284      	cmp	r4, r0
 8005bc8:	4623      	mov	r3, r4
 8005bca:	d807      	bhi.n	8005bdc <memmove+0x20>
 8005bcc:	1e43      	subs	r3, r0, #1
 8005bce:	42a1      	cmp	r1, r4
 8005bd0:	d008      	beq.n	8005be4 <memmove+0x28>
 8005bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bda:	e7f8      	b.n	8005bce <memmove+0x12>
 8005bdc:	4402      	add	r2, r0
 8005bde:	4601      	mov	r1, r0
 8005be0:	428a      	cmp	r2, r1
 8005be2:	d100      	bne.n	8005be6 <memmove+0x2a>
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bee:	e7f7      	b.n	8005be0 <memmove+0x24>

08005bf0 <_free_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d045      	beq.n	8005c84 <_free_r+0x94>
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f0c      	subs	r4, r1, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	18e4      	addlt	r4, r4, r3
 8005c04:	f000 f8d2 	bl	8005dac <__malloc_lock>
 8005c08:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <_free_r+0x98>)
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	b933      	cbnz	r3, 8005c1e <_free_r+0x2e>
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	6014      	str	r4, [r2, #0]
 8005c14:	4628      	mov	r0, r5
 8005c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c1a:	f000 b8cd 	b.w	8005db8 <__malloc_unlock>
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	d90b      	bls.n	8005c3a <_free_r+0x4a>
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	1862      	adds	r2, r4, r1
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bf04      	itt	eq
 8005c2a:	681a      	ldreq	r2, [r3, #0]
 8005c2c:	685b      	ldreq	r3, [r3, #4]
 8005c2e:	6063      	str	r3, [r4, #4]
 8005c30:	bf04      	itt	eq
 8005c32:	1852      	addeq	r2, r2, r1
 8005c34:	6022      	streq	r2, [r4, #0]
 8005c36:	6004      	str	r4, [r0, #0]
 8005c38:	e7ec      	b.n	8005c14 <_free_r+0x24>
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_free_r+0x54>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d9fa      	bls.n	8005c3a <_free_r+0x4a>
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	1850      	adds	r0, r2, r1
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d10b      	bne.n	8005c64 <_free_r+0x74>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	1850      	adds	r0, r2, r1
 8005c52:	4283      	cmp	r3, r0
 8005c54:	6011      	str	r1, [r2, #0]
 8005c56:	d1dd      	bne.n	8005c14 <_free_r+0x24>
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	6053      	str	r3, [r2, #4]
 8005c5e:	4401      	add	r1, r0
 8005c60:	6011      	str	r1, [r2, #0]
 8005c62:	e7d7      	b.n	8005c14 <_free_r+0x24>
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x7c>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d3      	b.n	8005c14 <_free_r+0x24>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	1821      	adds	r1, r4, r0
 8005c70:	428b      	cmp	r3, r1
 8005c72:	bf04      	itt	eq
 8005c74:	6819      	ldreq	r1, [r3, #0]
 8005c76:	685b      	ldreq	r3, [r3, #4]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	bf04      	itt	eq
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	6054      	str	r4, [r2, #4]
 8005c82:	e7c7      	b.n	8005c14 <_free_r+0x24>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	200000ac 	.word	0x200000ac

08005c8c <_malloc_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	1ccd      	adds	r5, r1, #3
 8005c90:	f025 0503 	bic.w	r5, r5, #3
 8005c94:	3508      	adds	r5, #8
 8005c96:	2d0c      	cmp	r5, #12
 8005c98:	bf38      	it	cc
 8005c9a:	250c      	movcc	r5, #12
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	db01      	blt.n	8005ca6 <_malloc_r+0x1a>
 8005ca2:	42a9      	cmp	r1, r5
 8005ca4:	d903      	bls.n	8005cae <_malloc_r+0x22>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	6033      	str	r3, [r6, #0]
 8005caa:	2000      	movs	r0, #0
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cae:	f000 f87d 	bl	8005dac <__malloc_lock>
 8005cb2:	4921      	ldr	r1, [pc, #132]	; (8005d38 <_malloc_r+0xac>)
 8005cb4:	680a      	ldr	r2, [r1, #0]
 8005cb6:	4614      	mov	r4, r2
 8005cb8:	b99c      	cbnz	r4, 8005ce2 <_malloc_r+0x56>
 8005cba:	4f20      	ldr	r7, [pc, #128]	; (8005d3c <_malloc_r+0xb0>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	b923      	cbnz	r3, 8005cca <_malloc_r+0x3e>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f862 	bl	8005d8c <_sbrk_r>
 8005cc8:	6038      	str	r0, [r7, #0]
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 f85d 	bl	8005d8c <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d123      	bne.n	8005d1e <_malloc_r+0x92>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 f86c 	bl	8005db8 <__malloc_unlock>
 8005ce0:	e7e3      	b.n	8005caa <_malloc_r+0x1e>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	1b5b      	subs	r3, r3, r5
 8005ce6:	d417      	bmi.n	8005d18 <_malloc_r+0x8c>
 8005ce8:	2b0b      	cmp	r3, #11
 8005cea:	d903      	bls.n	8005cf4 <_malloc_r+0x68>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	441c      	add	r4, r3
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	e004      	b.n	8005cfe <_malloc_r+0x72>
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	42a2      	cmp	r2, r4
 8005cf8:	bf0c      	ite	eq
 8005cfa:	600b      	streq	r3, [r1, #0]
 8005cfc:	6053      	strne	r3, [r2, #4]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f85a 	bl	8005db8 <__malloc_unlock>
 8005d04:	f104 000b 	add.w	r0, r4, #11
 8005d08:	1d23      	adds	r3, r4, #4
 8005d0a:	f020 0007 	bic.w	r0, r0, #7
 8005d0e:	1ac2      	subs	r2, r0, r3
 8005d10:	d0cc      	beq.n	8005cac <_malloc_r+0x20>
 8005d12:	1a1b      	subs	r3, r3, r0
 8005d14:	50a3      	str	r3, [r4, r2]
 8005d16:	e7c9      	b.n	8005cac <_malloc_r+0x20>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	6864      	ldr	r4, [r4, #4]
 8005d1c:	e7cc      	b.n	8005cb8 <_malloc_r+0x2c>
 8005d1e:	1cc4      	adds	r4, r0, #3
 8005d20:	f024 0403 	bic.w	r4, r4, #3
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d0e3      	beq.n	8005cf0 <_malloc_r+0x64>
 8005d28:	1a21      	subs	r1, r4, r0
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f000 f82e 	bl	8005d8c <_sbrk_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d1dd      	bne.n	8005cf0 <_malloc_r+0x64>
 8005d34:	e7cf      	b.n	8005cd6 <_malloc_r+0x4a>
 8005d36:	bf00      	nop
 8005d38:	200000ac 	.word	0x200000ac
 8005d3c:	200000b0 	.word	0x200000b0

08005d40 <_realloc_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	4607      	mov	r7, r0
 8005d44:	4614      	mov	r4, r2
 8005d46:	460e      	mov	r6, r1
 8005d48:	b921      	cbnz	r1, 8005d54 <_realloc_r+0x14>
 8005d4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d4e:	4611      	mov	r1, r2
 8005d50:	f7ff bf9c 	b.w	8005c8c <_malloc_r>
 8005d54:	b922      	cbnz	r2, 8005d60 <_realloc_r+0x20>
 8005d56:	f7ff ff4b 	bl	8005bf0 <_free_r>
 8005d5a:	4625      	mov	r5, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d60:	f000 f830 	bl	8005dc4 <_malloc_usable_size_r>
 8005d64:	42a0      	cmp	r0, r4
 8005d66:	d20f      	bcs.n	8005d88 <_realloc_r+0x48>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ff8e 	bl	8005c8c <_malloc_r>
 8005d70:	4605      	mov	r5, r0
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0f2      	beq.n	8005d5c <_realloc_r+0x1c>
 8005d76:	4631      	mov	r1, r6
 8005d78:	4622      	mov	r2, r4
 8005d7a:	f7ff ff11 	bl	8005ba0 <memcpy>
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff ff35 	bl	8005bf0 <_free_r>
 8005d86:	e7e9      	b.n	8005d5c <_realloc_r+0x1c>
 8005d88:	4635      	mov	r5, r6
 8005d8a:	e7e7      	b.n	8005d5c <_realloc_r+0x1c>

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d06      	ldr	r5, [pc, #24]	; (8005da8 <_sbrk_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb f8d4 	bl	8000f44 <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	2000016c 	.word	0x2000016c

08005dac <__malloc_lock>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__malloc_lock+0x8>)
 8005dae:	f000 b811 	b.w	8005dd4 <__retarget_lock_acquire_recursive>
 8005db2:	bf00      	nop
 8005db4:	20000174 	.word	0x20000174

08005db8 <__malloc_unlock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__malloc_unlock+0x8>)
 8005dba:	f000 b80c 	b.w	8005dd6 <__retarget_lock_release_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000174 	.word	0x20000174

08005dc4 <_malloc_usable_size_r>:
 8005dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc8:	1f18      	subs	r0, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bfbc      	itt	lt
 8005dce:	580b      	ldrlt	r3, [r1, r0]
 8005dd0:	18c0      	addlt	r0, r0, r3
 8005dd2:	4770      	bx	lr

08005dd4 <__retarget_lock_acquire_recursive>:
 8005dd4:	4770      	bx	lr

08005dd6 <__retarget_lock_release_recursive>:
 8005dd6:	4770      	bx	lr

08005dd8 <_init>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr

08005de4 <_fini>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	bf00      	nop
 8005de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dea:	bc08      	pop	{r3}
 8005dec:	469e      	mov	lr, r3
 8005dee:	4770      	bx	lr
